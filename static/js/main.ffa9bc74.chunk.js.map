{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","components/TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trimTitle","trim","TextField","variant","label","helperText","value","onChange","e","currentTarget","onKeyPress","key","IconButton","color","onClick","ControlPoint","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","Todolist","tasks","map","t","id","Checkbox","changeTaskStatus","checked","isDone","newTitle","changeTaskTitle","removeTask","Delete","changeTodoListTitle","removeTodoList","addTask","Button","changeTodoListFilter","size","filter","App","todoListID1","v1","todoListID2","todoLists","setTodoLists","setTasks","taskID","todoListID","filteredTasks","newTask","todoListTasks","task","find","newFilterValue","todolist","tl","todolisComponents","tasksForTodoList","Grid","item","Paper","style","padding","className","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","container","newTodoListID","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ffa9bc74.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {ControlPoint} from \"@material-ui/icons\";\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\n\nexport function AddItemForm (props: AddItemFormPropsType) {\n    const [title, setTitle] = useState<string>(\"\")\n    const [error, setError] = useState<string|null>(null)\n\n    const addItem = () => {\n        const trimTitle = title.trim()\n        if (trimTitle) {\n            props.addItem(trimTitle)\n            setTitle(\"\")} else {\n            setError(\"Title is required!\")\n        }\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            addItem()\n        }\n    }\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n        setError(null)\n    }\n\n    return (\n        <div>\n            <TextField variant={'outlined'}\n                       label={'type value'}\n                       error={!!error}\n                       helperText={error}\n                       value={title}\n                       onChange={onChangeHandler}\n                       onKeyPress={onKeyPressHandler}/>\n            <IconButton color={\"primary\"} onClick={addItem}>\n                <ControlPoint/>\n            </IconButton>\n            {/*{error && <div className={\"error-message\"}>{error}</div>}*/}\n        </div>\n    )\n}","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\ntype EditableSpanPropsType = {\n    title: string\n    changeTitle: (newTitle: string) => void\n}\n\n\nexport function EditableSpan (props: EditableSpanPropsType) {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [title, setTitle] = useState<string>(props.title)\n\n    const onEditMode = () => setEditMode(true)\n    const offEditMode = () => {\n        setEditMode(false)\n        props.changeTitle(title)\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return (\n        editMode\n        ? <TextField value={title}\n                     autoFocus\n                     onChange={changeTitle}\n                     onKeyPress={e => {if (e.key === \"Enter\") {offEditMode()}}}\n                     onBlur={offEditMode}/>\n        : <span onDoubleClick={onEditMode}>{props.title}</span>\n    )\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {FilterValuesType, TaskType} from \"../App\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport {EditableSpan} from \"./EditableSpan\";\nimport {Button, Checkbox, IconButton, ListItemText} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\n\ntype TodoListPropsType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n    tasks: Array<TaskType>\n    removeTask: (taskID: string, todoListID: string) => void\n    changeTodoListFilter: (newFilterValue: FilterValuesType, todoListID: string) => void\n    addTask: (title: string, todoListID: string) => void\n    changeTaskStatus:(taskID: string, isDone: boolean, todoListID: string) => void\n    removeTodoList:(todoListID: string) => void\n    changeTaskTitle: (taskID: string, newTitle: string, todoListID: string) => void\n    changeTodoListTitle: (newTitle: string, todoListID: string) => void\n}\n\nfunction Todolist(props: TodoListPropsType) {\n\n    const tasks = props.tasks.map(t => {\n        const removeTask = () => props.removeTask(t.id, props.id)\n        const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)\n        const changeTaskTitle = (newTitle: string) => {\n            props.changeTaskTitle(t.id, newTitle, props.id)\n        }\n        return (\n            <div key={t.id}>\n                <Checkbox onChange={changeTaskStatus} checked={t.isDone} />\n                <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\n                <IconButton onClick={removeTask}>\n                    <Delete/>\n                </IconButton>\n            </div>)\n    })\n    const removeTodoList = () => props.removeTodoList(props.id)\n    const onAllClickHandler = () => {props.changeTodoListFilter('all', props.id)}\n    const onActiveClickHandler = () => {props.changeTodoListFilter('active', props.id)}\n    const onCompletedClickHandler = () => {props.changeTodoListFilter('completed', props.id)}\n    const addTask = (title: string) => props.addTask(title, props.id)\n    const changeTodolistTitle = (title: string) => {\n        props.changeTodoListTitle(title, props.id)\n    }\n\n    return (\n        <div>\n            <h3>\n                <EditableSpan title={props.title} changeTitle={changeTodolistTitle}/>\n                <IconButton onClick={removeTodoList}>\n                    <Delete/>\n                </IconButton></h3>\n            <AddItemForm addItem={addTask}/>\n            {/*<ul style={{listStyle: \"none\", paddingLeft: \"0\"}}>*/}\n            <ul>{tasks}</ul>\n            <div>\n                <Button onClick={onAllClickHandler}\n                        size={\"small\"}\n                        variant={props.filter === \"all\" ? \"contained\" : \"text\"}\n                >All</Button>\n                <Button onClick={onActiveClickHandler}\n                        size={\"small\"}\n                        variant={props.filter === \"active\" ? \"contained\" : \"text\"}\n                        color={\"primary\"}\n                >Active</Button>\n                <Button onClick={onCompletedClickHandler}\n                        size={\"small\"}\n                        variant={props.filter === \"completed\" ? \"contained\" : \"text\"}\n                        color={\"secondary\"}\n                >Completed</Button>\n            </div>\n        </div>\n    );\n}\n\nexport default Todolist;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Todolist from \"./components/TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\ntype TaskStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nfunction App() {\r\n    // BLL:\r\n    const todoListID1 = v1()\r\n    const todoListID2 = v1()\r\n    const [todoLists, setTodoLists] = useState<TodoListType[]>([\r\n        {id: todoListID1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todoListID2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: true},\r\n            {id: v1(), title: \"GraphQL\", isDone: false}\r\n        ],\r\n        [todoListID2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"Bread\", isDone: true},\r\n            {id: v1(), title: \"Salt\", isDone: false},\r\n            {id: v1(), title: \"Sugar\", isDone: true},\r\n            {id: v1(), title: \"Fish\", isDone: false},\r\n        ]\r\n    })\r\n\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        const todoListTasks = tasks[todoListID]\r\n        const filteredTasks = todoListTasks.filter(t => t.id !== taskID) // true\r\n        tasks[todoListID] = filteredTasks\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        const newTask: TaskType = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        }\r\n        const todoListTasks = tasks[todoListID]\r\n        tasks[todoListID] = [newTask, ...todoListTasks]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeTaskStatus(taskID: string, isDone: boolean, todoListID: string) {\r\n        const todoListTasks = tasks[todoListID]\r\n        const task = todoListTasks.find(t => t.id === taskID)\r\n        if (task) {\r\n            task.isDone = isDone\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function changeTodoListFilter(newFilterValue: FilterValuesType, todoListID: string) {\r\n        const todolist = todoLists.find(tl => tl.id === todoListID)\r\n        if (todolist) {\r\n            todolist.filter = newFilterValue\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    function removeTodoList(todoListID: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        delete tasks[todoListID]\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        const newTodoListID = v1()\r\n        const todolist: TodoListType = {id: newTodoListID, title, filter: \"all\"}\r\n        setTodoLists([...todoLists, todolist])\r\n        setTasks({...tasks, [newTodoListID]: []})\r\n    }\r\n\r\n    function changeTaskTitle(taskID: string, newTitle: string, todoListID: string) {\r\n        const todoListTasks = tasks[todoListID]\r\n        const task = todoListTasks.find(t => t.id === taskID)\r\n        if (task) {\r\n            task.title = newTitle\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function changeTodoListTitle(newTitle: string, todoListID: string) {\r\n        let todolist = todoLists.find(tl => tl.id === todoListID)\r\n        if (todolist) {\r\n            todolist.title = newTitle\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    const todolisComponents = todoLists.map(tl => {\r\n        let tasksForTodoList = tasks[tl.id]\r\n        if (tl.filter === \"active\") {\r\n            tasksForTodoList = tasksForTodoList.filter(t => t.isDone === false)\r\n        }\r\n        if (tl.filter === \"completed\") {\r\n            tasksForTodoList = tasksForTodoList.filter(t => t.isDone === true)\r\n        }\r\n        return <Grid item>\r\n            <Paper style={{padding: \"10px\"}}>\r\n                <Todolist\r\n                    id={tl.id}\r\n                    title={tl.title}\r\n                    tasks={tasksForTodoList}\r\n                    filter={tl.filter}\r\n                    removeTask={removeTask}\r\n                    changeTodoListFilter={changeTodoListFilter}\r\n                    addTask={addTask}\r\n                    changeTaskStatus={changeTaskStatus}\r\n                    removeTodoList={removeTodoList}\r\n                    changeTaskTitle={changeTaskTitle}\r\n                    changeTodoListTitle={changeTodoListTitle}\r\n                />\r\n            </Paper>\r\n        </Grid>\r\n    })\r\n    // UI:\r\n    // CRUD:\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todolisComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}