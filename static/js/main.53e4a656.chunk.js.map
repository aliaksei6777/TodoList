{"version":3,"sources":["serviceWorker.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","components/TodoList.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","App.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","addItem","trimTitle","trim","TextField","variant","label","helperText","value","onChange","e","currentTarget","onKeyPress","key","IconButton","color","onClick","ControlPoint","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","Todolist","tasks","map","t","id","Checkbox","changeTaskStatus","checked","isDone","newTitle","changeTaskTitle","removeTask","Delete","changeTodoListTitle","removeTodoList","addTask","Button","changeTodoListFilter","size","filter","initialState","App","todolists","useSelector","state","dispatch","useDispatch","type","addTaskAC","taskID","removeTaskAC","changeTaskStatusAC","changeTaskTitleAC","newFilterValue","changeTodoListFilterAC","removeTodoListAC","changeTodoListTitleAC","todolistComponents","tl","tasksForTodoList","Grid","item","Paper","style","padding","className","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","container","v1","addTodoListAC","spacing","rootReducer","combineReducers","action","stateCopy","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.53e4a656.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {ControlPoint} from \"@material-ui/icons\";\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\n\nexport function AddItemForm (props: AddItemFormPropsType) {\n    const [title, setTitle] = useState<string>(\"\")\n    const [error, setError] = useState<string|null>(null)\n\n    const addItem = () => {\n        const trimTitle = title.trim()\n        if (trimTitle) {\n            props.addItem(trimTitle)\n            setTitle(\"\")} else {\n            setError(\"Title is required!\")\n        }\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            addItem()\n        }\n    }\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n        setError(null)\n    }\n\n    return (\n        <div>\n            <TextField variant={'outlined'}\n                       label={'title'}\n                       error={!!error}\n                       helperText={error}\n                       value={title}\n                       onChange={onChangeHandler}\n                       onKeyPress={onKeyPressHandler}/>\n            <IconButton color={\"primary\"} onClick={addItem}>\n                <ControlPoint/>\n            </IconButton>\n            {/*{error && <div className={\"error-message\"}>{error}</div>}*/}\n        </div>\n    )\n}","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\ntype EditableSpanPropsType = {\n    title: string\n    changeTitle: (newTitle: string) => void\n}\n\n\nexport function EditableSpan (props: EditableSpanPropsType) {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [title, setTitle] = useState<string>(props.title)\n\n    const onEditMode = () => setEditMode(true)\n    const offEditMode = () => {\n        setEditMode(false)\n        props.changeTitle(title)\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return (\n        editMode\n        ? <TextField value={title}\n                     autoFocus\n                     onChange={changeTitle}\n                     onKeyPress={e => {if (e.key === \"Enter\") {offEditMode()}}}\n                     onBlur={offEditMode}/>\n        : <span onDoubleClick={onEditMode}>{props.title}</span>\n    )\n}","import React, {ChangeEvent} from \"react\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport {EditableSpan} from \"./EditableSpan\";\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {FilterValuesType, TaskType} from \"../App\";\n\ntype TodoListPropsType = {\n    id: string\n    title: string\n    tasks: Array<TaskType>\n    filter: FilterValuesType\n    removeTask: (id: string, taskID: string) => void\n    changeTodoListFilter: (id: string, newFilterValue: FilterValuesType) => void\n    addTask: (id: string, title: string) => void\n    changeTaskStatus:(id: string, taskID: string, isDone: boolean) => void\n    removeTodoList:(id: string) => void\n    changeTaskTitle: (id: string, taskID: string, newTitle: string) => void\n    changeTodoListTitle: (id: string, newTitle: string) => void\n}\n\nfunction Todolist(props: TodoListPropsType) {\n\n    const tasks = props.tasks.map(t => {\n        const removeTask = () => props.removeTask(props.id,t.id)\n        const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(props.id, t.id, e.currentTarget.checked )\n        const changeTaskTitle = (newTitle: string) => {\n            props.changeTaskTitle(props.id, t.id, newTitle)\n        }\n        return (\n            <div key={t.id}>\n                <Checkbox onChange={changeTaskStatus} checked={t.isDone} />\n                <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\n                <IconButton onClick={removeTask}>\n                    <Delete/>\n                </IconButton>\n            </div>)\n    })\n    const removeTodoList = () => props.removeTodoList(props.id)\n    const onAllClickHandler = () => {props.changeTodoListFilter(props.id,'all' )}\n    const onActiveClickHandler = () => {props.changeTodoListFilter(props.id,'active' )}\n    const onCompletedClickHandler = () => {props.changeTodoListFilter(props.id,'completed' )}\n    const addTask = (title: string) => props.addTask(props.id,title)\n    const changeTodolistTitle = (title: string) => {\n        props.changeTodoListTitle(props.id,title)\n    }\n\n    return (\n        <div>\n            <h3>\n                <EditableSpan title={props.title} changeTitle={changeTodolistTitle}/>\n                <IconButton onClick={removeTodoList}>\n                    <Delete/>\n                </IconButton></h3>\n            <AddItemForm addItem={addTask}/>\n            {/*<ul style={{listStyle: \"none\", paddingLeft: \"0\"}}>*/}\n            <ul>{tasks}</ul>\n            <div>\n                <Button onClick={onAllClickHandler}\n                        size={\"small\"}\n                        variant={props.filter === \"all\" ? \"contained\" : \"text\"}\n                >All</Button>\n                <Button onClick={onActiveClickHandler}\n                        size={\"small\"}\n                        variant={props.filter === \"active\" ? \"contained\" : \"text\"}\n                        color={\"primary\"}\n                >Active</Button>\n                <Button onClick={onCompletedClickHandler}\n                        size={\"small\"}\n                        variant={props.filter === \"completed\" ? \"contained\" : \"text\"}\n                        color={\"secondary\"}\n                >Completed</Button>\n            </div>\n        </div>\n    );\n}\n\nexport default Todolist;","import {v1} from \"uuid\";\nimport {FilterValuesType, TodoListType} from \"../App\";\n\nexport type RemoveTodoListActionType = {\n    type: \"REMOVE-TODOLIST\"\n    id: string\n}\nexport type AddTodoListActionType = {\n    type: \"ADD-TODOLIST\",\n    id: string,\n    title: string\n\n}\ntype ChangeTodoListTitleActionType = {\n    type: \"CHANGE-TODOLIST-TITLE\"\n    id: string\n    title: string\n}\ntype ChangeTodoListFilterActionType = {\n    type: \"CHANGE-TODOLIST-FILTER\"\n    id: string\n    filter: FilterValuesType\n}\n\nexport type ActionType = RemoveTodoListActionType | AddTodoListActionType\n    | ChangeTodoListTitleActionType | ChangeTodoListFilterActionType\n\nconst initialState: Array<TodoListType> = []\n\nexport const todoListsReducer = (state: Array<TodoListType> = initialState, action: ActionType):Array<TodoListType> => {\n    switch (action.type) {\n        case \"REMOVE-TODOLIST\":{\n            return state.filter(tl => tl.id !== action.id)\n        }\n        case \"ADD-TODOLIST\": {\n            return [...state, {id: action.id, title: action.title, filter: \"all\"}]\n        }\n        case \"CHANGE-TODOLIST-TITLE\": {\n            return state.map(tl => tl.id === action.id ? {...tl,title: action.title} : {...tl})\n        }\n        case \"CHANGE-TODOLIST-FILTER\": {\n            return state.map(tl => tl.id === action.id ? {...tl,filter: action.filter} : tl)\n        }\n        default:\n            return state\n    }\n}\n\nexport const removeTodoListAC = (id: string): RemoveTodoListActionType => {\n    return {\n        type: \"REMOVE-TODOLIST\",\n        id\n    }\n}\nexport const addTodoListAC = (title: string): AddTodoListActionType => {\n    return {\n        type: \"ADD-TODOLIST\",\n        id: v1(),\n        title\n    }\n}\nexport const changeTodoListTitleAC = (id: string, title: string): ChangeTodoListTitleActionType => {\n    return {\n        type: \"CHANGE-TODOLIST-TITLE\",\n        id,\n        title\n    }\n}\nexport const changeTodoListFilterAC = (id: string, filter: FilterValuesType): ChangeTodoListFilterActionType => {\n    return {\n        type: \"CHANGE-TODOLIST-FILTER\",\n        id,\n        filter\n    }\n}","import {v1} from \"uuid\";\nimport {AddTodoListActionType, RemoveTodoListActionType} from \"./todolists-reducer\";\nimport {TaskStateType} from \"../App\";\n\ntype RemoveTaskActionType = {\n    type: \"REMOVE-TASK\"\n    taskID: string\n    id: string\n}\ntype AddTaskActionType = {\n    type: \"ADD-TASK\"\n    title: string\n    id: string\n}\ntype ChangeTaskStatusActionType = {\n    type: \"CHANGE-TASK-STATUS\"\n    taskID: string,\n    isDone: boolean,\n    id: string\n}\ntype ChangeTaskTitleActionType = {\n    type: \"CHANGE-TASK-TITLE\"\n    taskID: string,\n    title: string,\n    id: string\n}\n\nexport type ActionType = RemoveTaskActionType | AddTaskActionType\n    | ChangeTaskStatusActionType | ChangeTaskTitleActionType\n    | AddTodoListActionType | RemoveTodoListActionType\n\n\nconst initialState: TaskStateType = {}\n\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionType): TaskStateType => {\n    switch (action.type) {\n        case \"REMOVE-TASK\": {\n            return {...state,[action.id]: state[action.id].filter(t => t.id !== action.taskID)}\n        }\n        case \"ADD-TASK\": {\n            return {...state, [action.id]:[...state[action.id], {id: v1(), title: action.title, isDone: false}]}\n        }\n        case \"CHANGE-TASK-STATUS\": {\n            return {...state, [action.id]: state[action.id].map(t => t.id === action.taskID\n                    ? {...t,isDone: action.isDone} : t)}\n        }\n        case \"CHANGE-TASK-TITLE\": {\n            return {...state, [action.id]: state[action.id].map(t => t.id === action.taskID\n                    ? {...t,title: action.title} : t)}\n        }\n        case \"ADD-TODOLIST\": {\n            return {...state, [action.id]: []}\n\n        }\n        case \"REMOVE-TODOLIST\": {\n            const stateCopy = {...state}\n            delete stateCopy[action.id]\n            return stateCopy\n        }\n        default:\n            return state\n    }\n}\n\nexport const removeTaskAC = (id: string, taskID: string ): RemoveTaskActionType => {\n    return {type: \"REMOVE-TASK\", id, taskID} as const\n}\nexport const addTaskAC = (id: string, title: string): AddTaskActionType => {\n    return {type: \"ADD-TASK\", id, title} as const\n}\nexport const changeTaskStatusAC = (id: string, taskID: string, isDone: boolean): ChangeTaskStatusActionType => {\n    return {type: \"CHANGE-TASK-STATUS\", id, taskID, isDone} as const\n}\nexport const changeTaskTitleAC = (id: string, taskID: string, title: string, ): ChangeTaskTitleActionType => {\n    return {type: \"CHANGE-TASK-TITLE\", id, taskID, title} as const\n}\n","import React, {useReducer} from 'react';\r\nimport './App.css';\r\nimport Todolist from \"./components/TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodoListAC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleAC,\r\n    removeTodoListAC,\r\n    todoListsReducer\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nfunction App() {\r\n\r\n\r\n    const todolists = useSelector<AppRootStateType, TodoListType[]>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    function addTask(id: string, title: string) {\r\n        dispatch(addTaskAC(id, title))\r\n    }\r\n    function removeTask(id: string, taskID: string) {\r\n        dispatch(removeTaskAC(id, taskID))\r\n    }\r\n    function changeTaskStatus(id: string, taskID: string, isDone: boolean) {\r\n        dispatch(changeTaskStatusAC(id, taskID, isDone))\r\n    }\r\n    function changeTaskTitle(id: string, taskID: string, newTitle: string) {\r\n        dispatch(changeTaskTitleAC(id, taskID, newTitle))\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        dispatch(addTodoListAC(title))\r\n    }\r\n    function changeTodoListFilter(id: string, newFilterValue: FilterValuesType) {\r\n        dispatch(changeTodoListFilterAC(id, newFilterValue))\r\n    }\r\n    function removeTodoList(id: string) {\r\n        dispatch(removeTodoListAC(id))\r\n    }\r\n    function changeTodoListTitle(id: string, newTitle: string) {\r\n        dispatch(changeTodoListTitleAC(id, newTitle))\r\n    }\r\n\r\n    const todolistComponents = todolists.map(tl => {\r\n        let tasksForTodoList = tasks[tl.id]\r\n        if (tl.filter === \"active\") {\r\n            tasksForTodoList = tasksForTodoList.filter(t => t.isDone === false)\r\n        }\r\n        if (tl.filter === \"completed\") {\r\n            tasksForTodoList = tasksForTodoList.filter(t => t.isDone === true)\r\n        }\r\n        return <Grid item>\r\n            <Paper style={{padding: \"10px\"}}>\r\n                <Todolist\r\n                    id={tl.id}\r\n                    title={tl.title}\r\n                    tasks={tasksForTodoList}\r\n                    filter={tl.filter}\r\n                    removeTask={removeTask}\r\n                    changeTodoListFilter={changeTodoListFilter}\r\n                    addTask={addTask}\r\n                    changeTaskStatus={changeTaskStatus}\r\n                    removeTodoList={removeTodoList}\r\n                    changeTaskTitle={changeTaskTitle}\r\n                    changeTodoListTitle={changeTodoListTitle}\r\n                />\r\n            </Paper>\r\n        </Grid>\r\n    })\r\n    // UI:\r\n    // CRUD:\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <div>\r\n                        <h3>add new todolist</h3>\r\n                        <div><AddItemForm addItem={addTodoList}/></div>\r\n                    </div>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todolistComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {combineReducers, createStore} from \"redux\";\nimport {tasksReducer} from \"./tasks-reducer\";\nimport {todoListsReducer} from \"./todolists-reducer\";\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todoListsReducer\n})\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\nexport const store = createStore(rootReducer)\n\n// @ts-ignore\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}