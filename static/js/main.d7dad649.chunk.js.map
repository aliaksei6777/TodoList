{"version":3,"sources":["serviceWorker.ts","components/AddItemForm.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","components/EditableSpan.tsx","components/Task.tsx","components/TodoList.tsx","App.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trimTitle","trim","TextField","variant","label","helperText","value","onChange","e","currentTarget","onKeyPress","key","IconButton","color","onClick","ControlPoint","initialState","EditableSpan","console","log","editMode","setEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","Task","task","id","changeTaskTitle","changeTaskStatus","removeTask","onRemoveTaskClickHandler","useCallback","changeTaskStatusHandler","checked","newTitle","Checkbox","isDone","Delete","Todolist","tasksForTodoList","tasks","filter","t","map","addTask","changeTodolistTitle","changeTodoListTitle","onAllClickHandler","changeTodoListFilter","onActiveClickHandler","onCompletedClickHandler","removeTodoList","Button","size","App","preloadedState","todolists","useSelector","state","dispatch","useDispatch","type","addTaskAC","taskID","removeTaskAC","changeTaskStatusAC","changeTaskTitleAC","addTodoList","v1","addTodoListAC","newFilterValue","changeTodoListFilterAC","removeTodoListAC","changeTodoListTitleAC","todolistComponents","tl","Grid","item","Paper","style","padding","className","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","container","spacing","rootReducer","combineReducers","action","stateCopy","persistedTodostring","localStorage","getItem","JSON","parse","store","createStore","subscribe","setItem","stringify","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d7dad649.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {ControlPoint} from \"@material-ui/icons\";\n\nexport type AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\n\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\n    const [title, setTitle] = useState<string>(\"\")\n    const [error, setError] = useState<string | null>(null)\n\n    const addItem = () => {\n        const trimTitle = title.trim()\n        if (trimTitle) {\n            props.addItem(trimTitle)\n            setTitle(\"\")\n        } else {\n            setError(\"Title is required!\")\n        }\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null)\n        }\n        if (e.key === \"Enter\") {\n            addItem()\n        }\n    }\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return (\n        <div>\n            <TextField variant={'outlined'}\n                       label={'title'}\n                       error={!!error}\n                       helperText={error}\n                       value={title}\n                       onChange={onChangeHandler}\n                       onKeyPress={onKeyPressHandler}/>\n            <IconButton color={\"primary\"} onClick={addItem}>\n                <ControlPoint/>\n            </IconButton>\n        </div>\n    )\n})","import {v1} from \"uuid\";\nimport {FilterValuesType, TodoListType} from \"../App\";\n\nexport type RemoveTodoListActionType = {\n    type: \"REMOVE-TODOLIST\"\n    id: string\n}\nexport type AddTodoListActionType = {\n    type: \"ADD-TODOLIST\",\n    id: string,\n    title: string\n\n}\ntype ChangeTodoListTitleActionType = {\n    type: \"CHANGE-TODOLIST-TITLE\"\n    id: string\n    title: string\n}\ntype ChangeTodoListFilterActionType = {\n    type: \"CHANGE-TODOLIST-FILTER\"\n    id: string\n    filter: FilterValuesType\n}\n\nexport type ActionType = RemoveTodoListActionType | AddTodoListActionType\n    | ChangeTodoListTitleActionType | ChangeTodoListFilterActionType\n\nconst initialState: Array<TodoListType> = []\n\nexport const todoListsReducer = (state: Array<TodoListType> = initialState, action: ActionType):Array<TodoListType> => {\n    switch (action.type) {\n        case \"REMOVE-TODOLIST\":{\n            return state.filter(tl => tl.id !== action.id)\n        }\n        case \"ADD-TODOLIST\": {\n            return [...state, {id: action.id, title: action.title, filter: \"all\"}]\n        }\n        case \"CHANGE-TODOLIST-TITLE\": {\n            return state.map(tl => tl.id === action.id ? {...tl,title: action.title} : {...tl})\n        }\n        case \"CHANGE-TODOLIST-FILTER\": {\n            return state.map(tl => tl.id === action.id ? {...tl,filter: action.filter} : tl)\n        }\n        default:\n            return state\n    }\n}\n\nexport const removeTodoListAC = (id: string): RemoveTodoListActionType => {\n    return {\n        type: \"REMOVE-TODOLIST\",\n        id\n    }\n}\nexport const addTodoListAC = (title: string): AddTodoListActionType => {\n    return {\n        type: \"ADD-TODOLIST\",\n        id: v1(),\n        title\n    }\n}\nexport const changeTodoListTitleAC = (id: string, title: string): ChangeTodoListTitleActionType => {\n    return {\n        type: \"CHANGE-TODOLIST-TITLE\",\n        id,\n        title\n    }\n}\nexport const changeTodoListFilterAC = (id: string, filter: FilterValuesType): ChangeTodoListFilterActionType => {\n    return {\n        type: \"CHANGE-TODOLIST-FILTER\",\n        id,\n        filter\n    }\n}","import {v1} from \"uuid\";\nimport {AddTodoListActionType, RemoveTodoListActionType} from \"./todolists-reducer\";\nimport {TaskStateType} from \"../App\";\n\ntype RemoveTaskActionType = {\n    type: \"REMOVE-TASK\"\n    taskID: string\n    id: string\n}\ntype AddTaskActionType = {\n    type: \"ADD-TASK\"\n    title: string\n    id: string\n}\ntype ChangeTaskStatusActionType = {\n    type: \"CHANGE-TASK-STATUS\"\n    taskID: string,\n    isDone: boolean,\n    id: string\n}\ntype ChangeTaskTitleActionType = {\n    type: \"CHANGE-TASK-TITLE\"\n    taskID: string,\n    title: string,\n    id: string\n}\n\nexport type ActionType = RemoveTaskActionType | AddTaskActionType\n    | ChangeTaskStatusActionType | ChangeTaskTitleActionType\n    | AddTodoListActionType | RemoveTodoListActionType\n\n\nconst initialState: TaskStateType = {}\n\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionType): TaskStateType => {\n    switch (action.type) {\n        case \"REMOVE-TASK\": {\n            return {...state,[action.id]: state[action.id].filter(t => t.id !== action.taskID)}\n        }\n        case \"ADD-TASK\": {\n            return {...state, [action.id]:[...state[action.id], {id: v1(), title: action.title, isDone: false}]}\n        }\n        case \"CHANGE-TASK-STATUS\": {\n            return {...state, [action.id]: state[action.id].map(t => t.id === action.taskID\n                    ? {...t,isDone: action.isDone} : t)}\n        }\n        case \"CHANGE-TASK-TITLE\": {\n            return {...state, [action.id]: state[action.id].map(t => t.id === action.taskID\n                    ? {...t,title: action.title} : t)}\n        }\n        case \"ADD-TODOLIST\": {\n            return {...state, [action.id]: []}\n\n        }\n        case \"REMOVE-TODOLIST\": {\n            const stateCopy = {...state}\n            delete stateCopy[action.id]\n            return stateCopy\n        }\n        default:\n            return state\n    }\n}\n\nexport const removeTaskAC = (id: string, taskID: string ): RemoveTaskActionType => {\n    return {type: \"REMOVE-TASK\", id, taskID} as const\n}\nexport const addTaskAC = (id: string, title: string): AddTaskActionType => {\n    return {type: \"ADD-TASK\", id, title} as const\n}\nexport const changeTaskStatusAC = (id: string, taskID: string, isDone: boolean): ChangeTaskStatusActionType => {\n    return {type: \"CHANGE-TASK-STATUS\", id, taskID, isDone} as const\n}\nexport const changeTaskTitleAC = (id: string, taskID: string, title: string, ): ChangeTaskTitleActionType => {\n    return {type: \"CHANGE-TASK-TITLE\", id, taskID, title} as const\n}\n","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\nexport type EditableSpanPropsType = {\n    title: string\n    changeTitle: (newTitle: string) => void\n}\n\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n    console.log(\"EditableSpan\")\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [title, setTitle] = useState<string>(props.title)\n\n    const onEditMode = () => setEditMode(true)\n    const offEditMode = () => {\n        setEditMode(false)\n        props.changeTitle(title)\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return (\n        editMode\n            ? <TextField value={title}\n                         autoFocus\n                         onChange={changeTitle}\n                         onKeyPress={e => {if (e.key === \"Enter\") {offEditMode()}}}\n                         onBlur={offEditMode}/>\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\n    )\n});","import React, {ChangeEvent, useCallback} from 'react'\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport {EditableSpan} from \"./EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {TaskType} from \"../App\";\n\n\nexport type TaskPropsType = {\n    task: TaskType\n    id: string\n    changeTaskTitle: (id: string, taskID: string, newTitle: string) => void\n    changeTaskStatus:(id: string, taskID: string, isDone: boolean) => void\n    removeTask: (id: string, taskID: string) => void\n}\n\nexport const Task:React.FC<TaskPropsType> = React.memo(({task,id,changeTaskTitle,changeTaskStatus,removeTask}) => {\n    console.log(\"Task\")\n    const onRemoveTaskClickHandler = useCallback(() => removeTask(id,task.id),[removeTask,task.id,id])\n    const changeTaskStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) =>\n        changeTaskStatus(id, task.id, e.currentTarget.checked ),[changeTaskStatus,task.id,id])\n    const changeTitle = useCallback((newTitle: string) => {\n        changeTaskTitle(id, task.id, newTitle)},[changeTaskTitle,task.id,id])\n    return (\n        <div key={task.id}>\n            <Checkbox onChange={changeTaskStatusHandler} checked={task.isDone} />\n            <EditableSpan title={task.title} changeTitle={changeTitle}/>\n            <IconButton onClick={onRemoveTaskClickHandler}>\n                <Delete/>\n            </IconButton>\n        </div>)\n})\n\n\n","import React, {useCallback} from \"react\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport {EditableSpan} from \"./EditableSpan\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {FilterValuesType, TaskType} from \"../App\";\n\nimport {Task} from \"./Task\";\n\ntype TodoListPropsType = {\n    id: string\n    title: string\n    tasks: Array<TaskType>\n    filter: FilterValuesType\n    changeTodoListFilter: (id: string, newFilterValue: FilterValuesType) => void\n    addTask: (id: string, title: string) => void\n    removeTodoList:(id: string) => void\n    changeTaskTitle: (id: string, taskID: string, newTitle: string) => void\n    changeTaskStatus:(id: string, taskID: string, isDone: boolean) => void\n    removeTask: (id: string, taskID: string) => void\n    changeTodoListTitle: (id: string, newTitle: string) => void\n}\n\nexport const Todolist = React.memo((props: TodoListPropsType) => {\n    // let todolist = useSelector<AppRootStateType,TodoListType>(state => state.todolists.filter(todo => todo.id === props.id)[0])\n    // const dispatch = useDispatch()\n    // let ownTasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[props.id])\n    let tasksForTodoList = props.tasks\n    if (props.filter === \"active\") {\n        tasksForTodoList = tasksForTodoList.filter(t => t.isDone === false)\n    }\n    if (props.filter === \"completed\") {\n        tasksForTodoList = tasksForTodoList.filter(t => t.isDone === true)\n    }\n\n    const tasks = tasksForTodoList.map(t =>\n       <Task key={t.id} task={t} id={props.id} changeTaskTitle={props.changeTaskTitle}\n             changeTaskStatus={props.changeTaskStatus} removeTask={props.removeTask}/>\n    )\n\n    const addTask = useCallback((title: string) => props.addTask(props.id,title),[props.addTask,props.id])\n    const removeTodoList = () => props.removeTodoList(props.id)\n    const changeTodolistTitle = useCallback((title: string) => {\n        props.changeTodoListTitle(props.id,title)\n    },[props.changeTodoListTitle, props.id])\n    const onAllClickHandler = useCallback(() => {\n        props.changeTodoListFilter(props.id,'all' )},[props.changeTodoListFilter,props.id])\n    const onActiveClickHandler = useCallback(() => {\n        props.changeTodoListFilter(props.id,'active' )},[props.changeTodoListFilter,props.id])\n    const onCompletedClickHandler = useCallback(() => {\n        props.changeTodoListFilter(props.id,'completed' )},[props.changeTodoListFilter,props.id])\n\n    return (\n        <div>\n            <h3>\n                <EditableSpan title={props.title} changeTitle={changeTodolistTitle}/>\n                <IconButton onClick={removeTodoList}>\n                    <Delete/>\n                </IconButton></h3>\n            <AddItemForm addItem={addTask}/>\n            <ul>{tasks}</ul>\n            <div>\n                <Button onClick={onAllClickHandler}\n                        size={\"small\"}\n                        variant={props.filter === \"all\" ? \"contained\" : \"text\"}\n                >All</Button>\n                <Button onClick={onActiveClickHandler}\n                        size={\"small\"}\n                        variant={props.filter === \"active\" ? \"contained\" : \"text\"}\n                        color={\"primary\"}\n                >Active</Button>\n                <Button onClick={onCompletedClickHandler}\n                        size={\"small\"}\n                        variant={props.filter === \"completed\" ? \"contained\" : \"text\"}\n                        color={\"secondary\"}\n                >Completed</Button>\n            </div>\n        </div>\n    );\n})\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodoListAC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleAC,\r\n    removeTodoListAC,\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {Todolist} from \"./components/TodoList\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nfunction App() {\r\n\r\n    const todolists = useSelector<AppRootStateType, TodoListType[]>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    const addTask = useCallback((id: string, title: string) => {\r\n        dispatch(addTaskAC(id, title))\r\n    },[dispatch])\r\n    const removeTask = useCallback((id: string, taskID: string) => {\r\n        dispatch(removeTaskAC(id, taskID))\r\n    },[dispatch])\r\n    const changeTaskStatus = useCallback((id: string, taskID: string, isDone: boolean) => {\r\n        dispatch(changeTaskStatusAC(id, taskID, isDone))\r\n    },[dispatch])\r\n    const changeTaskTitle = useCallback((id: string, taskID: string, newTitle: string) => {\r\n        dispatch(changeTaskTitleAC(id, taskID, newTitle))\r\n    },[dispatch])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodoListAC(title))\r\n    },[dispatch])\r\n    const changeTodoListFilter = useCallback((id: string, newFilterValue: FilterValuesType) => {\r\n        dispatch(changeTodoListFilterAC(id, newFilterValue))\r\n    },[dispatch])\r\n    const removeTodoList = useCallback((id: string) => {\r\n        dispatch(removeTodoListAC(id))\r\n    },[dispatch])\r\n    const changeTodoListTitle = useCallback((id: string, newTitle: string) => {\r\n        dispatch(changeTodoListTitleAC(id, newTitle))\r\n    },[dispatch])\r\n\r\n    const todolistComponents = todolists.map(tl => {\r\n        return <Grid item key={tl.id}>\r\n            <Paper style={{padding: \"10px\"}}>\r\n                <Todolist\r\n                    key={tl.id}\r\n                    id={tl.id}\r\n                    title={tl.title}\r\n                    tasks={tasks[tl.id]}\r\n                    filter={tl.filter}\r\n                    removeTask={removeTask}\r\n                    changeTodoListFilter={changeTodoListFilter}\r\n                    addTask={addTask}\r\n                    changeTaskStatus={changeTaskStatus}\r\n                    removeTodoList={removeTodoList}\r\n                    changeTaskTitle={changeTaskTitle}\r\n                    changeTodoListTitle={changeTodoListTitle}\r\n                />\r\n            </Paper>\r\n        </Grid>\r\n    })\r\n    // UI:\r\n    // CRUD:\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <div>\r\n                        <h3>add new todolist</h3>\r\n                        <div><AddItemForm addItem={addTodoList}/></div>\r\n                    </div>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todolistComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {combineReducers, createStore} from \"redux\";\nimport {tasksReducer} from \"./tasks-reducer\";\nimport {todoListsReducer} from \"./todolists-reducer\";\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todoListsReducer\n})\n\nlet preloadedState;\nconst persistedTodostring = localStorage.getItem('app-state')\nif (persistedTodostring) {\n    preloadedState = JSON.parse(persistedTodostring)\n}\n\nexport const store = createStore(rootReducer,preloadedState)\n\nstore.subscribe(() => {\n    localStorage.setItem('app-state',JSON.stringify(store.getState()))\n})\n\n// @ts-ignore\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}