{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","utils/error.ts","features/TodolistsList/todolists-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/TodoList/Task/Task.tsx","features/TodolistsList/TodoList/TodoList.tsx","features/TodolistsList/TodolistsList.tsx","components/ ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","todolistId","title","put","delete","post","get","taskID","model","initialState","status","error","setAppStatusAC","type","setAppErrorAC","removeTask","todoListId","taskId","updateTask","updateTaskTC","id","dispatch","getState","a","state","task","tasks","find","t","description","priority","startDate","deadline","Error","handleServerAppError","data","messages","length","handleServerNetworkError","message","changeTodoListTitle","changeTodolistEntityStatusAC","entityStatus","rootReducer","combineReducers","action","filter","map","todolist","stateCopy","todolists","forEach","tl","app","store","createStore","applyMiddleware","thunk","AddItemForm","React","memo","props","useState","setTitle","setError","addItem","trimTitle","trim","TextField","variant","label","helperText","value","onChange","e","currentTarget","onKeyPress","key","disabled","IconButton","color","onClick","ControlPoint","EditableSpan","console","log","editMode","setEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","Task","changeTaskTitle","changeTaskStatus","onRemoveTaskClickHandler","useCallback","changeTaskStatusHandler","checked","Completed","New","newTitle","style","position","Checkbox","right","Delete","Todolist","useDispatch","useEffect","res","items","tasksForTodoList","addTask","changeTodolistTitle","onAllClickHandler","changeTodoListFilter","onActiveClickHandler","onCompletedClickHandler","padding","removeTodoList","top","size","Button","TodolistsList","useSelector","resultCode","item","addTaskTC","removeTaskTC","addTodoList","addTodolistTC","newFilterValue","removeTodolistTC","changeTodolistTitleTC","Grid","container","spacing","Paper","Alert","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","App","className","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.d6c2207f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': '3968e2e7-ef1b-4e58-9108-d41e4dea47f4'\n    }\n})\n\nexport const todolistAPI = {\n    updateTodolist(todolistId: string, title: string) {\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title: title})\n    },\n    deleteTodolist(todolistId: string){\n       return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\n    },\n    createTodolist(title: string){\n        return instance.post<ResponseType<{item: TodoListType}>>('todo-lists', {title: title})\n    },\n    getTodolists(){\n        return instance.get<TodoListType[]>('todo-lists')\n    },\n    getTasks(todolistId: string){\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\n    },\n    createTask(todolistId: string, title: string){\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: title})\n    },\n    deleteTask(todolistId: string, taskID: string){\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskID}`)\n    },\n    updateTask(model: UpdateTaskType,todolistId: string, taskID: string){\n        return instance.put<ResponseType<{item: TaskType}>>(`/todo-lists/${todolistId}/tasks/${taskID}`,model)\n    }\n}\n\n//types\nexport type TodoListType = {\n    id: string\n    addedDate: string\n    order: number\n    title: string\n}\nexport type ResponseType<T = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: T\n}\nexport type UpdateTaskType = {\n    title: string\n    description: string\n    status: number\n    priority: number\n    startDate: string\n    deadline: string\n}\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\nexport type GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\nconst initialState = {\n    status: 'loading' as RequestStatusType,\n    error: 'ERROR' as string | null\n}\n\ntype InitialStateType = typeof initialState\n\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'APP/SET-STATUS':\n            return {...state, status: action.status}\n        case \"APP/SET-ERROR\":\n            return {...state, error: action.error}\n        default:\n            return state\n    }\n}\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: \"APP/SET-STATUS\", status} as const)\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\n\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\nexport type AppActionsType = SetAppStatusActionType | SetAppErrorActionType\n","import {AddTodolistActionType, RemoveTodoListActionType, SetTodolistActionType} from \"./todolists-reducer\";\nimport {TaskType, todolistAPI} from \"../../api/todolist-api\";\nimport {AppRootStateType, AppThunk} from \"../../app/store\";\nimport {Dispatch} from \"redux\";\nimport {setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\n\nconst initialState: TaskStateType = {}\n\nexport const tasksReducer = (state: TaskStateType = initialState, action: TasksActionsType): TaskStateType => {\n    switch (action.type) {\n        case \"REMOVE-TASK\":\n            return {...state,[action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)}\n        case \"ADD-TASK\":\n            return {...state, [action.task.todoListId]: [...state[action.task.todoListId], action.task]}\n        case \"UPDATE-TASK\":\n            return {...state, [action.todoListId]: state[action.todoListId]\n                    .map(t => t.id === action.taskID ? {...t, ...action.model} : t)}\n        case \"ADD-TODOLIST\":\n            return {...state, [action.todolist.id]: []}\n        case \"REMOVE-TODOLIST\":\n            const stateCopy = {...state}\n            delete stateCopy[action.todoListId]\n            return stateCopy\n        case \"SET-TODOLIST\": {\n            const stateCopy = {...state}\n            action.todolists.forEach(tl => {\n                stateCopy[tl.id] = []\n            })\n            return stateCopy\n        }\n        case \"SET-TASKS\": {\n            return {...state, [action.todoListId]: action.tasks}\n        }\n        default:\n            return state\n    }\n}\n\n//actions\nexport const removeTask = (todoListId: string, taskId: string ) =>\n    ({type: \"REMOVE-TASK\", todoListId, taskId} as const)\nexport const addTask = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\nexport const updateTask = (todoListId: string, taskID: string, model: UpdateTaskDomainModelType) => ({\n    type: \"UPDATE-TASK\", todoListId, taskID, model} as const)\nexport const setTasks = (tasks: TaskType[], todoListId: string) => ({type: 'SET-TASKS', tasks, todoListId} as const)\n\n//thunks\nexport const fetchTasksTC = (id: string): AppThunk => async dispatch => {\n    try {\n        dispatch(setAppStatusAC('loading'))\n        const res = await todolistAPI.getTasks(id)\n        dispatch(setTasks(res.data.items,id))\n        dispatch(setAppStatusAC('succeeded'))\n    } catch (e) {\n        throw new Error(e)\n    }\n\n}\n\nexport const removeTaskTC = (id: string, taskId: string):AppThunk => async dispatch => {\n    try {\n        dispatch(setAppStatusAC('loading'))\n        const res = await todolistAPI.deleteTask(id, taskId)\n        dispatch(removeTask(id, taskId))\n        dispatch(setAppStatusAC('succeeded'))\n    } catch (e) {\n        throw new Error(e)\n    }\n}\n\nexport const addTaskTC = (id: string, title: string):AppThunk => async dispatch => {\n    dispatch(setAppStatusAC('loading'))\n    const res = await todolistAPI.createTask(id, title)\n    if (res.data.resultCode === 0) {\n        dispatch(addTask(res.data.data.item))\n        dispatch(setAppStatusAC('succeeded'))\n    } else {\n        if (res.data.messages.length) {\n            dispatch(setAppErrorAC(res.data.messages[0]))\n        } else {\n            dispatch(setAppErrorAC('ERROR'))\n        }\n        dispatch(setAppStatusAC('failed'))\n    }\n}\n\nexport const updateTaskTC = (id: string, taskId: string, model: UpdateTaskDomainModelType):AppThunk =>\n    async (dispatch: Dispatch,getState: () => AppRootStateType) => {\n    try {\n        const state = getState()\n        const task = state.tasks[id].find(t => t.id === taskId)\n        if(task) {\n            dispatch(setAppStatusAC('loading'))\n            const res = await todolistAPI.updateTask({\n                title: task.title,\n                description: task.description,\n                status: task.status,\n                priority: task.priority,\n                startDate: task.startDate,\n                deadline: task.deadline,\n                ...model\n            },id,taskId, )\n            dispatch(updateTask(id, taskId,model))\n            dispatch(setAppStatusAC('succeeded'))\n        }\n    } catch (e) {\n        throw new Error(e)\n    }\n}\n\n//types\nexport type UpdateTaskDomainModelType = {\n    title?: string\n    description?: string\n    status?: number\n    priority?: number\n    startDate?: string\n    deadline?: string\n}\nexport type TasksActionsType =\n    | ReturnType<typeof removeTask>\n    | ReturnType<typeof addTask>\n    | ReturnType<typeof updateTask>\n    | ReturnType<typeof setTasks>\n    | AddTodolistActionType\n    | RemoveTodoListActionType\n    | SetTodolistActionType\nexport type TaskStateType = {\n    [key: string]: TaskType[]\n}\n\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../app/app-reducer\";\nimport {Dispatch} from \"redux\";\nimport {ResponseType} from \"../api/todolist-api\";\n\nexport const handleServerAppError = <T>(dispatch: Dispatch<ErrorsActionType>, data: ResponseType<T>) => {\n    if (data.messages.length) {\n        dispatch(setAppErrorAC(data.messages[0]))\n    } else {\n        dispatch(setAppErrorAC('ERROR'))\n    }\n    dispatch(setAppStatusAC('failed'))\n}\n\n\nexport const handleServerNetworkError = (dispatch: Dispatch<ErrorsActionType>, message: string) => {\n    dispatch(setAppErrorAC(message))\n    dispatch(setAppStatusAC('failed'))\n}\n\ntype ErrorsActionType = SetAppErrorActionType | SetAppStatusActionType","import {todolistAPI, TodoListType} from \"../../api/todolist-api\";\nimport {AppThunk} from \"../../app/store\";\nimport {Dispatch} from \"redux\";\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\nimport {AxiosError} from \"axios\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error\";\n\nconst initialState: Array<TodolistDomainType> = []\nexport const todoListsReducer = (state: Array<TodolistDomainType> = initialState, action: TodolistsActionsType):Array<TodolistDomainType> => {\n    switch (action.type) {\n        case \"REMOVE-TODOLIST\":\n            return state.filter(tl => tl.id !== action.todoListId)\n        case \"ADD-TODOLIST\":\n            return [{...action.todolist, filter: \"all\",entityStatus: 'idle'},...state]\n        case \"CHANGE-TODOLIST-TITLE\":\n            return state.map(tl => tl.id === action.todoListId ? {...tl,title: action.title} : tl)\n        case \"CHANGE-TODOLIST-FILTER\":\n            return state.map(tl => tl.id === action.todoListId ? {...tl,filter: action.filter} : tl)\n        case \"SET-TODOLIST\":\n            return action.todolists.map(tl => ({...tl, filter: \"all\", entityStatus: 'idle'}))\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\n            return state.map(tl => tl.id === action.id ? {...tl,entityStatus: action.entityStatus} : tl)\n        default:\n            return state\n    }\n}\n\n//actions\nexport const removeTodoList = (todoListId: string) => ({type: \"REMOVE-TODOLIST\", todoListId} as const)\nexport const addTodolist = (todolist: TodoListType) => ({type: \"ADD-TODOLIST\", todolist} as const)\nexport const changeTodoListTitle = (todoListId: string, title: string) =>\n    ({type: \"CHANGE-TODOLIST-TITLE\", todoListId, title} as const)\nexport const changeTodoListFilterAC = (todoListId: string, filter: FilterValuesType) =>\n    ({type: \"CHANGE-TODOLIST-FILTER\", todoListId, filter} as const)\nexport const setTodolist = (todolists: TodoListType[]) => ({type: 'SET-TODOLIST', todolists} as const)\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\n    id,\n    entityStatus\n} as const)\n\n//thunks\nexport const fetchTodolistTC = ():AppThunk => async dispatch => {\n    try {\n        dispatch(setAppStatusAC('loading'))\n        const res = await todolistAPI.getTodolists()\n        dispatch(setTodolist(res.data))\n        dispatch(setAppStatusAC('succeeded'))\n    } catch (e) {\n        throw new Error(e)\n    }\n}\n\nexport const addTodolistTC = (title: string):AppThunk => async dispatch => {\n    try{\n        dispatch(setAppStatusAC('loading'))\n        const res = await todolistAPI.createTodolist(title)\n        if(res.data.resultCode === 0){\n            dispatch(addTodolist(res.data.data.item))\n            dispatch(setAppStatusAC('succeeded'))\n        } else {\n            handleServerAppError(dispatch,res.data)\n        }\n    } catch (err: AxiosError | any) {\n        handleServerNetworkError(dispatch, err.message)\n    }\n\n}\n\nexport const removeTodolistTC = (id: string):AppThunk => async dispatch => {\n    dispatch(setAppStatusAC('loading'))\n    dispatch(changeTodolistEntityStatusAC(id, \"loading\"))\n    const res = await todolistAPI.deleteTodolist(id)\n    dispatch(removeTodoList(id))\n    dispatch(setAppStatusAC('succeeded'))\n}\n\nexport const changeTodolistTitleTC = (id: string, title: string):AppThunk => async dispatch => {\n    try {\n        dispatch(setAppStatusAC('loading'))\n        const res = await todolistAPI.updateTodolist(id, title)\n        dispatch(changeTodoListTitle(id, title))\n        dispatch(setAppStatusAC('succeeded'))\n    } catch (e) {\n        throw new Error(e)\n    }\n\n}\n//types\nexport type RemoveTodoListActionType = ReturnType<typeof removeTodoList>\nexport type AddTodolistActionType = ReturnType<typeof addTodolist>\nexport type SetTodolistActionType = ReturnType<typeof setTodolist>\nexport type TodolistsActionsType =\n    | RemoveTodoListActionType\n    | AddTodolistActionType\n    | ReturnType<typeof changeTodoListTitle>\n    | ReturnType<typeof changeTodoListFilterAC>\n    | SetTodolistActionType\n    | ReturnType<typeof changeTodolistEntityStatusAC>\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\nexport type TodolistDomainType = TodoListType & {\n    filter: FilterValuesType\n    entityStatus: RequestStatusType\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {TasksActionsType, tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\nimport {TodolistsActionsType, todoListsReducer} from \"../features/TodolistsList/todolists-reducer\";\nimport thunk, {ThunkAction} from \"redux-thunk\";\nimport {AppActionsType, appReducer} from \"./app-reducer\";\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\nexport type ActionsType = TodolistsActionsType | TasksActionsType | AppActionsType\nexport type AppThunk<ReturnType = void> = ThunkAction<void,AppRootStateType,unknown,ActionsType>\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todoListsReducer,\n    app: appReducer\n})\n\nexport const store = createStore(rootReducer,applyMiddleware(thunk))\n// @ts-ignore\nwindow.store = store","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {ControlPoint} from \"@material-ui/icons\";\nimport {RequestStatusType} from \"../../app/app-reducer\";\n\nexport type AddItemFormPropsType = {\n    addItem: (title: string) => void\n    entityStatus?: RequestStatusType\n}\n\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\n    const [title, setTitle] = useState<string>(\"\")\n    const [error, setError] = useState<string | null>(null)\n\n    const addItem = () => {\n        const trimTitle = title.trim()\n        if (trimTitle) {\n            props.addItem(trimTitle)\n            setTitle(\"\")\n        } else {\n            setError(\"Title is required!\")\n        }\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null)\n        }\n        if (e.key === \"Enter\") {\n            addItem()\n        }\n    }\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return (\n        <div>\n            <TextField variant={'outlined'}\n                       label={'title'}\n                       error={!!error}\n                       helperText={error}\n                       value={title}\n                       onChange={onChangeHandler}\n                       onKeyPress={onKeyPressHandler}\n                       disabled={props.entityStatus === 'loading'}\n                       />\n            <IconButton color={\"primary\"} onClick={addItem} disabled={props.entityStatus === 'loading'}>\n                <ControlPoint/>\n            </IconButton>\n        </div>\n    )\n})","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\nexport type EditableSpanPropsType = {\n    title: string\n    changeTitle: (newTitle: string) => void\n}\n\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n    console.log(\"EditableSpan\")\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [title, setTitle] = useState<string>(props.title)\n\n    const onEditMode = () => setEditMode(true)\n    const offEditMode = () => {\n        setEditMode(false)\n        props.changeTitle(title)\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return (\n        editMode\n            ? <TextField value={title}\n                         autoFocus\n                         onChange={changeTitle}\n                         onKeyPress={e => {if (e.key === \"Enter\") {offEditMode()}}}\n                         onBlur={offEditMode}/>\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\n    )\n});","import React, {ChangeEvent, useCallback} from 'react'\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\n\n\nexport type TaskPropsType = {\n    task: TaskType\n    todoListId: string\n    changeTaskTitle: (id: string, taskID: string, newTitle: string) => void\n    changeTaskStatus:(id: string, taskID: string, status: TaskStatuses) => void\n    removeTask: (id: string, taskID: string) => void\n}\n\nexport const Task:React.FC<TaskPropsType> = React.memo(({task,todoListId,changeTaskTitle,\n                                                            changeTaskStatus,removeTask}) => {\n    console.log(\"Task\")\n    const onRemoveTaskClickHandler = useCallback(() => removeTask(todoListId,task.id),\n        [removeTask,task.id,todoListId])\n    const changeTaskStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) =>\n        changeTaskStatus(todoListId, task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New)\n        ,[changeTaskStatus,task.id,todoListId])\n    const changeTitle = useCallback((newTitle: string) => {\n        changeTaskTitle(todoListId, task.id, newTitle)},[changeTaskTitle,task.id,todoListId])\n    return (\n        <div key={task.id} style={{position: 'relative'}}>\n            <Checkbox onChange={changeTaskStatusHandler} checked={task.status === TaskStatuses.Completed} />\n            <EditableSpan title={task.title} changeTitle={changeTitle}/>\n            <IconButton onClick={onRemoveTaskClickHandler} style={{ position: 'absolute', right: '5px'} }>\n                <Delete/>\n            </IconButton>\n        </div>)\n})\n\n\n","import React, {useCallback, useEffect} from \"react\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {Task} from \"./Task/Task\";\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\nimport {changeTodolistEntityStatusAC, FilterValuesType} from \"../todolists-reducer\";\nimport {useDispatch} from \"react-redux\";\nimport {fetchTasksTC} from \"../tasks-reducer\";\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\nimport {RequestStatusType} from \"../../../app/app-reducer\";\n\ntype TodoListPropsType = {\n    id: string\n    title: string\n    entityStatus: RequestStatusType\n    tasks: Array<TaskType>\n    filter: FilterValuesType\n    changeTodoListFilter: (id: string, newFilterValue: FilterValuesType) => void\n    addTask: (id: string, title: string) => void\n    removeTodoList:(id: string) => void\n    changeTaskTitle: (id: string, taskID: string, newTitle: string) => void\n    changeTaskStatus:(id: string, taskID: string, status: TaskStatuses) => void\n    removeTask: (id: string, taskID: string) => void\n    changeTodoListTitle: (id: string, newTitle: string) => void\n}\n\nexport const Todolist = React.memo((props: TodoListPropsType) => {\n    // let todolist = useSelector<AppRootStateType,TodoListType>(state => state.todolists.filter(todo => todo.id === props.id)[0])\n    const dispatch = useDispatch()\n    // let ownTasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[props.id])\n    useEffect(() => {\n        dispatch(fetchTasksTC(props.id))\n    },[])\n    let tasksForTodoList = props.tasks\n    if (props.filter === \"active\") {\n        tasksForTodoList = tasksForTodoList.filter(t => t.status === TaskStatuses.New)\n    }\n    if (props.filter === \"completed\") {\n        tasksForTodoList = tasksForTodoList.filter(t => t.status === TaskStatuses.Completed)\n    }\n\n    const tasks = tasksForTodoList.map(t =>\n       <Task key={t.id} task={t} todoListId={props.id} changeTaskTitle={props.changeTaskTitle}\n             changeTaskStatus={props.changeTaskStatus} removeTask={props.removeTask}/>\n    )\n\n    const addTask = useCallback((title: string) => props.addTask(props.id,title),[props.addTask,props.id])\n    const removeTodoList = () => {\n        props.removeTodoList(props.id)\n    }\n    const changeTodolistTitle = useCallback((title: string) => {props.changeTodoListTitle(props.id,title)},\n        [props.changeTodoListTitle, props.id])\n\n    const onAllClickHandler = useCallback(() => {props.changeTodoListFilter(props.id,'all' )},\n        [props.changeTodoListFilter,props.id])\n\n    const onActiveClickHandler = useCallback(() => {props.changeTodoListFilter(props.id,'active' )},\n        [props.changeTodoListFilter,props.id])\n\n    const onCompletedClickHandler = useCallback(() => {\n        props.changeTodoListFilter(props.id,'completed' )},[props.changeTodoListFilter,props.id])\n\n    return (\n        <div style={{padding: '10px', position: 'relative'}}>\n            <h3>\n                <EditableSpan title={props.title} changeTitle={changeTodolistTitle}/>\n                <IconButton onClick={removeTodoList}\n                            style={{position: 'absolute', right: '2px', top: '2px'}}\n                            size={\"small\"}\n                            disabled={props.entityStatus === 'loading'}\n                >\n                    <Delete/>\n                </IconButton></h3>\n            <AddItemForm addItem={addTask} entityStatus={props.entityStatus}/>\n            <div>\n                {tasks}\n                {!tasksForTodoList.length && <div style={{padding: '10px', color: 'grey'}}>No task</div>}\n            </div>\n            <div>\n                <Button onClick={onAllClickHandler}\n                        size={\"small\"}\n                        variant={props.filter === \"all\" ? \"contained\" : \"text\"}\n                >All</Button>\n                <Button onClick={onActiveClickHandler}\n                        size={\"small\"}\n                        variant={props.filter === \"active\" ? \"contained\" : \"text\"}\n                        color={\"primary\"}\n                >Active</Button>\n                <Button onClick={onCompletedClickHandler}\n                        size={\"small\"}\n                        variant={props.filter === \"completed\" ? \"contained\" : \"text\"}\n                        color={\"secondary\"}\n                >Completed</Button>\n            </div>\n        </div>\n    );\n})\n","import React, {useCallback, useEffect} from \"react\";\nimport {\n    addTodolistTC, changeTodoListFilterAC, changeTodolistTitleTC,\n    fetchTodolistTC,\n    FilterValuesType,\n    removeTodolistTC,\n    TodolistDomainType\n} from \"./todolists-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {addTaskTC, removeTaskTC, TaskStateType, updateTaskTC} from \"./tasks-reducer\";\nimport {TaskStatuses} from \"../../api/todolist-api\";\nimport {Grid, Paper} from \"@material-ui/core\";\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\nimport {Todolist} from \"./TodoList/TodoList\";\n\nexport const TodolistsList: React.FC = () => {\n\n    useEffect(() => {\n        dispatch(fetchTodolistTC())\n    }, [])\n\n    const todolists = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todolists)\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\n    const dispatch = useDispatch()\n\n    const addTask = useCallback((id: string, title: string) => {\n        dispatch(addTaskTC(id, title))\n    }, [dispatch])\n\n    const removeTask = useCallback((id: string, taskID: string) => {\n        dispatch(removeTaskTC(id, taskID))\n    }, [dispatch])\n\n    const changeTaskStatus = useCallback((id: string, taskID: string, status: TaskStatuses) => {\n        dispatch(updateTaskTC(id, taskID, {status}))\n    }, [dispatch])\n\n    const changeTaskTitle = useCallback((id: string, taskID: string, newTitle: string) => {\n        dispatch(updateTaskTC(id, taskID, {title: newTitle}))\n    }, [dispatch])\n\n    const addTodoList = useCallback((title: string) => {\n        dispatch(addTodolistTC(title))\n    }, [dispatch])\n    const changeTodoListFilter = useCallback((id: string, newFilterValue: FilterValuesType) => {\n        dispatch(changeTodoListFilterAC(id, newFilterValue))\n    }, [dispatch])\n    const removeTodoList = useCallback((id: string) => {\n        dispatch(removeTodolistTC(id))\n    }, [dispatch])\n    const changeTodoListTitle = useCallback((id: string, newTitle: string) => {\n        dispatch(changeTodolistTitleTC(id, newTitle))\n    }, [dispatch])\n\n    return (\n        <>\n            <Grid container style={{padding: \"20px\"}}>\n                <div>\n                    <h3>add new todolist</h3>\n                    <div><AddItemForm addItem={addTodoList}/></div>\n                </div>\n            </Grid>\n            <Grid container spacing={3}>\n                {todolists.map(tl => {\n                    return <Grid item key={tl.id}>\n                        <Paper style={{padding: \"10px\"}}>\n                            <Todolist\n                                key={tl.id}\n                                id={tl.id}\n                                title={tl.title}\n                                tasks={tasks[tl.id]}\n                                filter={tl.filter}\n                                entityStatus={tl.entityStatus}\n                                removeTask={removeTask}\n                                changeTodoListFilter={changeTodoListFilter}\n                                addTask={addTask}\n                                changeTaskStatus={changeTaskStatus}\n                                removeTodoList={removeTodoList}\n                                changeTaskTitle={changeTaskTitle}\n                                changeTodoListTitle={changeTodoListTitle}\n                            />\n                        </Paper>\n                    </Grid>\n                })}\n            </Grid>\n        </>\n    )\n}","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {setAppErrorAC} from \"../../app/app-reducer\";\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport function ErrorSnackbar() {\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\n    const dispatch = useDispatch()\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return\n        }\n        dispatch(setAppErrorAC(null))\n    }\n\n    return (\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\">\n                {error}\n            </Alert>\n        </Snackbar>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\nimport {useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./store\";\nimport {RequestStatusType} from \"./app-reducer\";\nimport {ErrorSnackbar} from \"../components/ ErrorSnackbar/ErrorSnackbar\";\n\n\nfunction App() {\n\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            {status === \"loading\" && <LinearProgress color=\"secondary\" />}\n            <Container fixed>\n                <TodolistsList/>\n            </Container>\n            <ErrorSnackbar/>\n        </div>\n    );\n}\n\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport App from \"./app/App\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}