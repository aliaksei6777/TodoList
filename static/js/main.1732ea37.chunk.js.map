{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/TodoList/Task/Task.tsx","features/TodolistsList/TodoList/TodoList.tsx","features/TodolistsList/TodolistsList.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","todolistId","title","put","delete","post","get","taskID","model","initialState","removeTask","todoListId","taskId","type","updateTask","updateTaskTC","id","dispatch","getState","a","state","task","tasks","find","t","description","status","priority","startDate","deadline","Error","rootReducer","combineReducers","action","filter","map","todolist","stateCopy","todolists","forEach","tl","store","createStore","applyMiddleware","thunk","AddItemForm","React","memo","props","useState","setTitle","error","setError","addItem","trimTitle","trim","TextField","variant","label","helperText","value","onChange","e","currentTarget","onKeyPress","key","IconButton","color","onClick","ControlPoint","EditableSpan","console","log","editMode","setEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","Task","changeTaskTitle","changeTaskStatus","onRemoveTaskClickHandler","useCallback","changeTaskStatusHandler","checked","Completed","New","newTitle","style","position","Checkbox","right","Delete","Todolist","useDispatch","useEffect","res","data","items","tasksForTodoList","addTask","changeTodolistTitle","changeTodoListTitle","onAllClickHandler","changeTodoListFilter","onActiveClickHandler","onCompletedClickHandler","padding","removeTodoList","top","size","length","Button","TodolistsList","useSelector","item","addTaskTC","removeTaskTC","addTodoList","addTodolistTC","newFilterValue","removeTodolistTC","then","changeTodolistTitleTC","Grid","container","spacing","Paper","App","className","AppBar","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1732ea37.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': '3968e2e7-ef1b-4e58-9108-d41e4dea47f4'\n    }\n})\n\nexport const todolistAPI = {\n    updateTodolist(todolistId: string, title: string) {\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title: title})\n    },\n    deleteTodolist(todolistId: string){\n       return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\n    },\n    createTodolist(title: string){\n        return instance.post<ResponseType<{item: TodoListType}>>('todo-lists', {title: title})\n    },\n    getTodolists(){\n        return instance.get<TodoListType[]>('todo-lists')\n    },\n    getTasks(todolistId: string){\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\n    },\n    createTask(todolistId: string, title: string){\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: title})\n    },\n    deleteTask(todolistId: string, taskID: string){\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskID}`)\n    },\n    updateTask(model: UpdateTaskType,todolistId: string, taskID: string){\n        return instance.put<ResponseType<{item: TaskType}>>(`/todo-lists/${todolistId}/tasks/${taskID}`,model)\n    }\n}\n\n//types\nexport type TodoListType = {\n    id: string\n    addedDate: string\n    order: number\n    title: string\n}\ntype ResponseType<T = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: T\n}\nexport type UpdateTaskType = {\n    title: string\n    description: string\n    status: number\n    priority: number\n    startDate: string\n    deadline: string\n}\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\nexport type GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\n","import {AddTodolistActionType, RemoveTodoListActionType, SetTodolistActionType} from \"./todolists-reducer\";\nimport {TaskType, todolistAPI} from \"../../api/todolist-api\";\nimport {AppRootStateType, AppThunk} from \"../../app/store\";\nimport {Dispatch} from \"redux\";\n\nconst initialState: TaskStateType = {}\n\nexport const tasksReducer = (state: TaskStateType = initialState, action: TasksActionsType): TaskStateType => {\n    switch (action.type) {\n        case \"REMOVE-TASK\":\n            return {...state,[action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)}\n        case \"ADD-TASK\":\n            return {...state, [action.task.todoListId]: [...state[action.task.todoListId], action.task]}\n        case \"UPDATE-TASK\":\n            return {...state, [action.todoListId]: state[action.todoListId]\n                    .map(t => t.id === action.taskID ? {...t, ...action.model} : t)}\n        case \"ADD-TODOLIST\":\n            return {...state, [action.todolist.id]: []}\n        case \"REMOVE-TODOLIST\":\n            const stateCopy = {...state}\n            delete stateCopy[action.todoListId]\n            return stateCopy\n        case \"SET-TODOLIST\": {\n            const stateCopy = {...state}\n            action.todolists.forEach(tl => {\n                stateCopy[tl.id] = []\n            })\n            return stateCopy\n        }\n        case \"SET-TASKS\": {\n            return {...state, [action.todoListId]: action.tasks}\n        }\n        default:\n            return state\n    }\n}\n\n//actions\nexport const removeTask = (todoListId: string, taskId: string ) =>\n    ({type: \"REMOVE-TASK\", todoListId, taskId} as const)\nexport const addTask = (todoListId: string, task: TaskType) => ({type: 'ADD-TASK', task, todoListId} as const)\nexport const updateTask = (todoListId: string, taskID: string, model: UpdateTaskDomainModelType) => ({\n    type: \"UPDATE-TASK\", todoListId, taskID, model} as const)\nexport const setTasks = (tasks: TaskType[], todoListId: string) => ({type: 'SET-TASKS', tasks, todoListId} as const)\n\n//thunks\nexport const fetchTasksTC = (id: string): AppThunk => async dispatch => {\n    const res = await todolistAPI.getTasks(id)\n    dispatch(setTasks(res.data.items,id))\n}\n\nexport const removeTaskTC = (id: string, taskId: string):AppThunk => async dispatch => {\n    try {\n        const res = await todolistAPI.deleteTask(id, taskId)\n        dispatch(removeTask(id, taskId))\n    } catch (e) {\n        throw new Error(e)\n    }\n}\n\nexport const addTaskTC = (id: string, title: string):AppThunk => async dispatch => {\n    try {\n        const res = await todolistAPI.createTask(id, title)\n        dispatch(addTask(id, res.data.data.item))\n    } catch (e) {\n        throw new Error(e)\n    }\n}\n\nexport const updateTaskTC = (id: string, taskId: string, model: UpdateTaskDomainModelType) =>\n    async (dispatch: Dispatch,getState: () => AppRootStateType) => {\n    try {\n        const state = getState()\n        const task = state.tasks[id].find(t => t.id === taskId)\n        if(task) {\n            const res = todolistAPI.updateTask({\n                title: task.title,\n                description: task.description,\n                status: task.status,\n                priority: task.priority,\n                startDate: task.startDate,\n                deadline: task.deadline,\n                ...model\n            },id,taskId, )\n            dispatch(updateTask(id, taskId,model))\n        }\n    } catch (e) {\n        throw new Error(e)\n    }\n}\n\n//types\nexport type UpdateTaskDomainModelType = {\n    title?: string\n    description?: string\n    status?: number\n    priority?: number\n    startDate?: string\n    deadline?: string\n}\nexport type TasksActionsType =\n    | ReturnType<typeof removeTask>\n    | ReturnType<typeof addTask>\n    | ReturnType<typeof updateTask>\n    | ReturnType<typeof setTasks>\n    | AddTodolistActionType\n    | RemoveTodoListActionType\n    | SetTodolistActionType\nexport type TaskStateType = {\n    [key: string]: TaskType[]\n}\n\n","import {todolistAPI, TodoListType} from \"../../api/todolist-api\";\nimport {AppThunk} from \"../../app/store\";\nimport {Dispatch} from \"redux\";\n\nconst initialState: Array<TodolistDomainType> = []\nexport const todoListsReducer = (state: Array<TodolistDomainType> = initialState, action: TodolistsActionsType):Array<TodolistDomainType> => {\n    switch (action.type) {\n        case \"REMOVE-TODOLIST\":\n            return state.filter(tl => tl.id !== action.todoListId)\n        case \"ADD-TODOLIST\":\n            return [{...action.todolist, filter: \"all\"},...state]\n        case \"CHANGE-TODOLIST-TITLE\":\n            return state.map(tl => tl.id === action.todoListId ? {...tl,title: action.title} : tl)\n        case \"CHANGE-TODOLIST-FILTER\":\n            return state.map(tl => tl.id === action.todoListId ? {...tl,filter: action.filter} : tl)\n        case \"SET-TODOLIST\":\n            return action.todolists.map(tl => ({...tl, filter: \"all\"}))\n        default:\n            return state\n    }\n}\n\n//actions\nexport const removeTodoList = (todoListId: string) => ({type: \"REMOVE-TODOLIST\", todoListId} as const)\nexport const addTodolist = (todolist: TodoListType) => ({type: \"ADD-TODOLIST\", todolist} as const)\nexport const changeTodoListTitle = (todoListId: string, title: string) =>\n    ({type: \"CHANGE-TODOLIST-TITLE\", todoListId, title} as const)\nexport const changeTodoListFilterAC = (todoListId: string, filter: FilterValuesType) =>\n    ({type: \"CHANGE-TODOLIST-FILTER\", todoListId, filter} as const)\nexport const setTodolist = (todolists: TodoListType[]) => ({type: 'SET-TODOLIST', todolists} as const)\n\n//thunks\nexport const fetchTodolistTC = ():AppThunk => async dispatch => {\n    try {\n        const res = await todolistAPI.getTodolists()\n        dispatch(setTodolist(res.data))\n    } catch (e) {\n        throw new Error(e)\n    }\n}\n\nexport const addTodolistTC = (title: string):AppThunk => async dispatch => {\n    try {\n        const res = await todolistAPI.createTodolist(title)\n        dispatch(addTodolist(res.data.data.item))\n    } catch (e) {\n        throw new Error(e)\n    }\n}\n\nexport const removeTodolistTC = (id: string):AppThunk => async dispatch => {\n    try {\n        const res = await todolistAPI.deleteTodolist(id)\n        dispatch(removeTodoList(id))\n    } catch (e) {\n        throw new Error(e)\n    }\n}\nexport const changeTodolistTitleTC = (id: string, title: string) => {\n    return (dispatch: Dispatch) => {\n        todolistAPI.updateTodolist(id, title)\n            .then((res) => {\n                dispatch(changeTodoListTitle(id, title))\n            })\n    }\n}\n//types\nexport type RemoveTodoListActionType = ReturnType<typeof removeTodoList>\nexport type AddTodolistActionType = ReturnType<typeof addTodolist>\nexport type SetTodolistActionType = ReturnType<typeof setTodolist>\nexport type TodolistsActionsType =\n    | RemoveTodoListActionType\n    | AddTodolistActionType\n    | ReturnType<typeof changeTodoListTitle>\n    | ReturnType<typeof changeTodoListFilterAC>\n    | SetTodolistActionType\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\nexport type TodolistDomainType = TodoListType & {filter: FilterValuesType}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {TasksActionsType, tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\nimport {TodolistsActionsType, todoListsReducer} from \"../features/TodolistsList/todolists-reducer\";\nimport thunk, {ThunkAction} from \"redux-thunk\";\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todoListsReducer\n})\n\n// let preloadedState;\n// const persistedTodostring = localStorage.getItem('app-state')\n// if (persistedTodostring) {\n//     preloadedState = JSON.parse(persistedTodostring)\n// }\nexport type AppActionsType = TodolistsActionsType | TasksActionsType\nexport type AppThunk<ReturnType = void> = ThunkAction<void,AppRootStateType,unknown,AppActionsType>\nexport const store = createStore(rootReducer,applyMiddleware(thunk))\n\n// store.subscribe(() => {\n//     localStorage.setItem('app-state',JSON.stringify(store.getState()))\n// })\n\n// @ts-ignore\nwindow.store = store","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {ControlPoint} from \"@material-ui/icons\";\n\nexport type AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\n\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\n    const [title, setTitle] = useState<string>(\"\")\n    const [error, setError] = useState<string | null>(null)\n\n    const addItem = () => {\n        const trimTitle = title.trim()\n        if (trimTitle) {\n            props.addItem(trimTitle)\n            setTitle(\"\")\n        } else {\n            setError(\"Title is required!\")\n        }\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null)\n        }\n        if (e.key === \"Enter\") {\n            addItem()\n        }\n    }\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return (\n        <div>\n            <TextField variant={'outlined'}\n                       label={'title'}\n                       error={!!error}\n                       helperText={error}\n                       value={title}\n                       onChange={onChangeHandler}\n                       onKeyPress={onKeyPressHandler}/>\n            <IconButton color={\"primary\"} onClick={addItem}>\n                <ControlPoint/>\n            </IconButton>\n        </div>\n    )\n})","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\nexport type EditableSpanPropsType = {\n    title: string\n    changeTitle: (newTitle: string) => void\n}\n\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n    console.log(\"EditableSpan\")\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [title, setTitle] = useState<string>(props.title)\n\n    const onEditMode = () => setEditMode(true)\n    const offEditMode = () => {\n        setEditMode(false)\n        props.changeTitle(title)\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return (\n        editMode\n            ? <TextField value={title}\n                         autoFocus\n                         onChange={changeTitle}\n                         onKeyPress={e => {if (e.key === \"Enter\") {offEditMode()}}}\n                         onBlur={offEditMode}/>\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\n    )\n});","import React, {ChangeEvent, useCallback} from 'react'\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\n\n\nexport type TaskPropsType = {\n    task: TaskType\n    todoListId: string\n    changeTaskTitle: (id: string, taskID: string, newTitle: string) => void\n    changeTaskStatus:(id: string, taskID: string, status: TaskStatuses) => void\n    removeTask: (id: string, taskID: string) => void\n}\n\nexport const Task:React.FC<TaskPropsType> = React.memo(({task,todoListId,changeTaskTitle,\n                                                            changeTaskStatus,removeTask}) => {\n    console.log(\"Task\")\n    const onRemoveTaskClickHandler = useCallback(() => removeTask(todoListId,task.id),\n        [removeTask,task.id,todoListId])\n    const changeTaskStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) =>\n        changeTaskStatus(todoListId, task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New)\n        ,[changeTaskStatus,task.id,todoListId])\n    const changeTitle = useCallback((newTitle: string) => {\n        changeTaskTitle(todoListId, task.id, newTitle)},[changeTaskTitle,task.id,todoListId])\n    return (\n        <div key={task.id} style={{position: 'relative'}}>\n            <Checkbox onChange={changeTaskStatusHandler} checked={task.status === TaskStatuses.Completed} />\n            <EditableSpan title={task.title} changeTitle={changeTitle}/>\n            <IconButton onClick={onRemoveTaskClickHandler} style={{ position: 'absolute', right: '5px'} }>\n                <Delete/>\n            </IconButton>\n        </div>)\n})\n\n\n","import React, {useCallback, useEffect} from \"react\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {Task} from \"./Task/Task\";\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\nimport {FilterValuesType} from \"../todolists-reducer\";\nimport {useDispatch} from \"react-redux\";\nimport {fetchTasksTC} from \"../tasks-reducer\";\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\n\ntype TodoListPropsType = {\n    id: string\n    title: string\n    tasks: Array<TaskType>\n    filter: FilterValuesType\n    changeTodoListFilter: (id: string, newFilterValue: FilterValuesType) => void\n    addTask: (id: string, title: string) => void\n    removeTodoList:(id: string) => void\n    changeTaskTitle: (id: string, taskID: string, newTitle: string) => void\n    changeTaskStatus:(id: string, taskID: string, status: TaskStatuses) => void\n    removeTask: (id: string, taskID: string) => void\n    changeTodoListTitle: (id: string, newTitle: string) => void\n}\n\nexport const Todolist = React.memo((props: TodoListPropsType) => {\n    // let todolist = useSelector<AppRootStateType,TodoListType>(state => state.todolists.filter(todo => todo.id === props.id)[0])\n    const dispatch = useDispatch()\n    // let ownTasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[props.id])\n    useEffect(() => {\n        dispatch(fetchTasksTC(props.id))\n    },[])\n    let tasksForTodoList = props.tasks\n    if (props.filter === \"active\") {\n        tasksForTodoList = tasksForTodoList.filter(t => t.status === TaskStatuses.New)\n    }\n    if (props.filter === \"completed\") {\n        tasksForTodoList = tasksForTodoList.filter(t => t.status === TaskStatuses.Completed)\n    }\n\n    const tasks = tasksForTodoList.map(t =>\n       <Task key={t.id} task={t} todoListId={props.id} changeTaskTitle={props.changeTaskTitle}\n             changeTaskStatus={props.changeTaskStatus} removeTask={props.removeTask}/>\n    )\n\n    const addTask = useCallback((title: string) => props.addTask(props.id,title),[props.addTask,props.id])\n    const removeTodoList = () => props.removeTodoList(props.id)\n    const changeTodolistTitle = useCallback((title: string) => {props.changeTodoListTitle(props.id,title)},\n        [props.changeTodoListTitle, props.id])\n\n    const onAllClickHandler = useCallback(() => {props.changeTodoListFilter(props.id,'all' )},\n        [props.changeTodoListFilter,props.id])\n\n    const onActiveClickHandler = useCallback(() => {props.changeTodoListFilter(props.id,'active' )},\n        [props.changeTodoListFilter,props.id])\n\n    const onCompletedClickHandler = useCallback(() => {\n        props.changeTodoListFilter(props.id,'completed' )},[props.changeTodoListFilter,props.id])\n\n    return (\n        <div style={{padding: '10px', position: 'relative'}}>\n            <h3>\n                <EditableSpan title={props.title} changeTitle={changeTodolistTitle}/>\n                <IconButton onClick={removeTodoList}\n                            style={{position: 'absolute', right: '2px', top: '2px'}}\n                            size={\"small\"}\n                >\n                    <Delete/>\n                </IconButton></h3>\n            <AddItemForm addItem={addTask}/>\n            <div>\n                {tasks}\n                {!tasksForTodoList.length && <div style={{padding: '10px', color: 'grey'}}>No task</div>}\n            </div>\n            <div>\n                <Button onClick={onAllClickHandler}\n                        size={\"small\"}\n                        variant={props.filter === \"all\" ? \"contained\" : \"text\"}\n                >All</Button>\n                <Button onClick={onActiveClickHandler}\n                        size={\"small\"}\n                        variant={props.filter === \"active\" ? \"contained\" : \"text\"}\n                        color={\"primary\"}\n                >Active</Button>\n                <Button onClick={onCompletedClickHandler}\n                        size={\"small\"}\n                        variant={props.filter === \"completed\" ? \"contained\" : \"text\"}\n                        color={\"secondary\"}\n                >Completed</Button>\n            </div>\n        </div>\n    );\n})\n","import React, {useCallback, useEffect} from \"react\";\nimport {\n    addTodolistTC, changeTodoListFilterAC, changeTodolistTitleTC,\n    fetchTodolistTC,\n    FilterValuesType,\n    removeTodolistTC,\n    TodolistDomainType\n} from \"./todolists-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {addTaskTC, removeTaskTC, TaskStateType, updateTaskTC} from \"./tasks-reducer\";\nimport {TaskStatuses} from \"../../api/todolist-api\";\nimport {Grid, Paper} from \"@material-ui/core\";\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\nimport {Todolist} from \"./TodoList/TodoList\";\n\nexport const TodolistsList: React.FC = () => {\n\n    useEffect(() => {\n        dispatch(fetchTodolistTC())\n    }, [])\n\n    const todolists = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todolists)\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\n    const dispatch = useDispatch()\n\n    const addTask = useCallback((id: string, title: string) => {\n        dispatch(addTaskTC(id, title))\n    }, [dispatch])\n\n    const removeTask = useCallback((id: string, taskID: string) => {\n        dispatch(removeTaskTC(id, taskID))\n    }, [dispatch])\n\n    const changeTaskStatus = useCallback((id: string, taskID: string, status: TaskStatuses) => {\n        dispatch(updateTaskTC(id, taskID, {status}))\n    }, [dispatch])\n\n    const changeTaskTitle = useCallback((id: string, taskID: string, newTitle: string) => {\n        dispatch(updateTaskTC(id, taskID, {title: newTitle}))\n    }, [dispatch])\n\n    const addTodoList = useCallback((title: string) => {\n        dispatch(addTodolistTC(title))\n    }, [dispatch])\n    const changeTodoListFilter = useCallback((id: string, newFilterValue: FilterValuesType) => {\n        dispatch(changeTodoListFilterAC(id, newFilterValue))\n    }, [dispatch])\n    const removeTodoList = useCallback((id: string) => {\n        dispatch(removeTodolistTC(id))\n    }, [dispatch])\n    const changeTodoListTitle = useCallback((id: string, newTitle: string) => {\n        dispatch(changeTodolistTitleTC(id, newTitle))\n    }, [dispatch])\n\n    return (\n        <>\n            <Grid container style={{padding: \"20px\"}}>\n                <div>\n                    <h3>add new todolist</h3>\n                    <div><AddItemForm addItem={addTodoList}/></div>\n                </div>\n            </Grid>\n            <Grid container spacing={3}>\n                {todolists.map(tl => {\n                    return <Grid item key={tl.id}>\n                        <Paper style={{padding: \"10px\"}}>\n                            <Todolist\n                                key={tl.id}\n                                id={tl.id}\n                                title={tl.title}\n                                tasks={tasks[tl.id]}\n                                filter={tl.filter}\n                                removeTask={removeTask}\n                                changeTodoListFilter={changeTodoListFilter}\n                                addTask={addTask}\n                                changeTaskStatus={changeTaskStatus}\n                                removeTodoList={removeTodoList}\n                                changeTaskTitle={changeTaskTitle}\n                                changeTodoListTitle={changeTodoListTitle}\n                            />\n                        </Paper>\n                    </Grid>\n                })}\n            </Grid>\n        </>\n    )\n}","import React from 'react';\nimport './App.css';\nimport {AppBar, Button, Container, IconButton, Toolbar, Typography} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\n\n\nfunction App() {\n    // UI:\n    // CRUD:\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <TodolistsList/>\n            </Container>\n        </div>\n    );\n}\n\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport App from \"./app/App\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}