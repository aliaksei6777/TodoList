{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","utils/error.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/TodoList/Task/Task.tsx","features/TodolistsList/TodoList/TodoList.tsx","features/TodolistsList/TodolistsList.tsx","components/ ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","authAPI","data","post","get","delete","todolistAPI","todolistId","title","put","taskID","model","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","error","isInitialized","removeTask","todoListId","taskId","updateTask","updateTaskTC","id","getState","a","state","task","tasks","find","t","console","warn","apiModel","deadline","description","priority","startDate","res","resultCode","changeTodoListTitle","changeTodolistEntityStatusAC","entityStatus","rootReducer","combineReducers","action","filter","map","todolist","stateCopy","todolists","forEach","tl","app","auth","store","createStore","applyMiddleware","thunk","AddItemForm","React","memo","props","useState","setTitle","setError","addItem","trimTitle","trim","TextField","variant","label","helperText","onChange","e","currentTarget","onKeyPress","key","disabled","IconButton","color","onClick","ControlPoint","EditableSpan","log","editMode","setEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","Task","changeTaskTitle","changeTaskStatus","onRemoveTaskClickHandler","useCallback","changeTaskStatusHandler","checked","Completed","New","newTitle","style","position","Checkbox","right","Delete","Todolist","demo","useEffect","items","useDispatch","tasksForTodoList","addTask","changeTodolistTitle","onAllClickHandler","changeTodoListFilter","onActiveClickHandler","onCompletedClickHandler","padding","removeTodoList","top","size","Button","TodolistsList","useSelector","item","addTaskTC","removeTaskTC","addTodoList","addTodolistTC","newFilterValue","removeTodolistTC","changeTodolistTitleTC","Grid","container","spacing","Paper","to","Alert","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","logoutHandler","className","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","textAlign","fontSize","from","width","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.3a81cfae.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': '3968e2e7-ef1b-4e58-9108-d41e4dea47f4'\n    }\n})\n\nexport const authAPI = {\n    login(data: LoginParamsType) {\n        return instance.post<ResponseType<{userId?: number}>>('auth/login', data)\n    },\n    me() {\n        return instance.get<ResponseType<{id: number; email: string; login: string }>>('/auth/me')\n    },\n    logout(){\n        return instance.delete('auth/login')\n    }\n}\n\nexport const todolistAPI = {\n    updateTodolist(todolistId: string, title: string) {\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title: title})\n    },\n    deleteTodolist(todolistId: string){\n       return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\n    },\n    createTodolist(title: string){\n        return instance.post<ResponseType<{item: TodoListType}>>('todo-lists', {title: title})\n    },\n    getTodolists(){\n        return instance.get<TodoListType[]>('todo-lists')\n    },\n    getTasks(todolistId: string){\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\n    },\n    createTask(todolistId: string, title: string){\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: title})\n    },\n    deleteTask(todolistId: string, taskID: string){\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskID}`)\n    },\n    updateTask(model: UpdateTaskType,todolistId: string, taskID: string){\n        return instance.put<ResponseType<{item: TaskType}>>(`/todo-lists/${todolistId}/tasks/${taskID}`,model)\n    }\n}\n\n//types\nexport type AuthMeType = {\n    id: number\n    email: string\n    login: string\n}\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: string\n}\nexport type TodoListType = {\n    id: string\n    addedDate: string\n    order: number\n    title: string\n}\nexport type ResponseType<T = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: T\n}\nexport type UpdateTaskType = {\n    title: string\n    description: string\n    status: number\n    priority: number\n    startDate: string\n    deadline: string\n}\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\nexport type GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../app/app-reducer\";\nimport {Dispatch} from \"redux\";\nimport {ResponseType} from \"../api/todolist-api\";\n\nexport const handleServerAppError = <T>(dispatch: Dispatch<ErrorsActionType>, data: ResponseType<T>) => {\n    if (data.messages.length) {\n        dispatch(setAppErrorAC(data.messages[0]))\n    } else {\n        dispatch(setAppErrorAC('ERROR'))\n    }\n    dispatch(setAppStatusAC('failed'))\n}\n\nexport const handleServerNetworkError = (dispatch: Dispatch<ErrorsActionType>, message: string) => {\n    dispatch(setAppErrorAC(message))\n    dispatch(setAppStatusAC('failed'))\n}\n\ntype ErrorsActionType = SetAppErrorActionType | SetAppStatusActionType","import {setAppStatusAC} from '../../app/app-reducer'\nimport {authAPI, LoginParamsType} from \"../../api/todolist-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error\";\nimport {AppThunk} from \"../../app/store\";\n\nconst initialState = {\n    isLoggedIn: false\n}\n\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionType): InitialStateType => {\n    switch (action.type) {\n        case 'login/SET-IS-LOGGED-IN':\n            return {...state, isLoggedIn: action.value}\n        default:\n            return state\n    }\n}\n\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\n// thunks\nexport const loginTC = (data: LoginParamsType):AppThunk => async dispatch => {\n    try {\n        dispatch(setAppStatusAC('loading'))\n        const res = await authAPI.login(data)\n        if(res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC(true))\n            dispatch(setAppStatusAC('succeeded'))\n        } else {\n            handleServerAppError(dispatch,res.data)\n        }\n    } catch (e) {\n        handleServerNetworkError(dispatch, e.message)\n    }\n}\n\nexport const logoutTC = ():AppThunk => async dispatch => {\n    try {\n        dispatch(setAppStatusAC('loading'))\n        const res = await authAPI.logout()\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC(false))\n            dispatch(setAppStatusAC('succeeded'))\n        } else {\n            handleServerAppError(dispatch,res.data)\n        }\n    } catch (e) {\n        handleServerNetworkError(dispatch,e.message)\n    }\n}\n\n\n// types\nexport type AuthActionType = ReturnType<typeof setIsLoggedInAC>\ntype InitialStateType = typeof initialState\n\n","import {authAPI} from \"../api/todolist-api\";\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error\";\nimport {AppThunk} from \"./store\";\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\nconst initialState = {\n    status: 'idle' as RequestStatusType,\n    error: null as string | null,\n    isInitialized: false\n}\n\nexport type InitialStateType = typeof initialState\n\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'APP/SET-STATUS':\n            return {...state, status: action.status}\n        case \"APP/SET-ERROR\":\n            return {...state, error: action.error}\n        case \"APP/SET-IS-INITIALIZED\":\n            return {...state, isInitialized: action.isInitialized}\n        default:\n            return state\n    }\n}\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: \"APP/SET-STATUS\", status} as const)\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\nexport const setAppIsInitializedAC = (isInitialized: boolean) => ({type: \"APP/SET-IS-INITIALIZED\", isInitialized} as const)\n\nexport const initializeAppTC = ():AppThunk => async dispatch => {\n    try {\n        const res = await authAPI.me()\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC(true));\n        } else {\n            handleServerAppError(dispatch,res.data)\n        }\n    } catch (e) {\n        handleServerNetworkError(dispatch, e.message)\n    } finally {\n        dispatch(setAppIsInitializedAC(true))\n    }\n}\n\n\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\nexport type AppActionsType = SetAppStatusActionType | SetAppErrorActionType | ReturnType<typeof setAppIsInitializedAC>\n","import {\n    AddTodolistActionType,\n    RemoveTodoListActionType,\n    SetTodolistActionType\n} from \"./todolists-reducer\";\nimport {TaskType, todolistAPI, TodoListType, UpdateTaskType} from \"../../api/todolist-api\";\nimport {AppRootStateType, AppThunk} from \"../../app/store\";\nimport {Dispatch} from \"redux\";\nimport {setAppStatusAC} from \"../../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error\";\n\nconst initialState: TaskStateType = {}\n\nexport const tasksReducer = (state: TaskStateType = initialState, action: TasksActionsType): TaskStateType => {\n    switch (action.type) {\n        case \"REMOVE-TASK\":\n            return {...state,[action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)}\n        case \"ADD-TASK\":\n            return {...state, [action.task.todoListId]: [...state[action.task.todoListId], action.task]}\n        case \"UPDATE-TASK\":\n            return {...state, [action.todoListId]: state[action.todoListId]\n                    .map(t => t.id === action.taskID ? {...t, ...action.model} : t)}\n        case \"ADD-TODOLIST\":\n            return {...state, [action.todolist.id]: []}\n        case \"REMOVE-TODOLIST\":\n            const stateCopy = {...state}\n            delete stateCopy[action.todoListId]\n            return stateCopy\n        case \"SET-TODOLIST\": {\n            const stateCopy = {...state}\n            action.todolists.forEach(tl => {\n                stateCopy[tl.id] = []\n            })\n            return stateCopy\n        }\n        case \"SET-TASKS\": {\n            return {...state, [action.todoListId]: action.tasks}\n        }\n        default:\n            return state\n    }\n}\n\n//actions\nexport const removeTask = (todoListId: string, taskId: string ) => ({type: \"REMOVE-TASK\", todoListId, taskId} as const)\nexport const addTask = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\nexport const updateTask = (todoListId: string, taskID: string, model: UpdateTaskDomainModelType) => ({\n    type: \"UPDATE-TASK\", todoListId, taskID, model} as const)\nexport const setTasks = (tasks: TaskType[], todoListId: string) => ({type: 'SET-TASKS', tasks, todoListId} as const)\n\n//thunks\nexport const fetchTasksTC = (id: string): AppThunk => async dispatch => {\n    try {\n        dispatch(setAppStatusAC('loading'))\n        const res = await todolistAPI.getTasks(id)\n        dispatch(setTasks(res.data.items,id))\n        dispatch(setAppStatusAC('succeeded'))\n    } catch (e) {\n        handleServerNetworkError(dispatch,e.message)\n    }\n\n}\n\nexport const removeTaskTC = (id: string, taskId: string):AppThunk => async dispatch => {\n    try {\n        dispatch(setAppStatusAC('loading'))\n        const res = await todolistAPI.deleteTask(id, taskId)\n        if(res.data.resultCode === 0) {\n            dispatch(removeTask(id, taskId))\n            dispatch(setAppStatusAC('succeeded'))\n        } else {\n            handleServerAppError(dispatch,res.data)\n        }\n    } catch (e) {\n        handleServerNetworkError(dispatch,e.message)\n    }\n}\n\nexport const addTaskTC = (id: string, title: string):AppThunk => async dispatch => {\n    try {\n        dispatch(setAppStatusAC('loading'))\n        const res = await todolistAPI.createTask(id, title)\n        if (res.data.resultCode === 0) {\n            dispatch(addTask(res.data.data.item))\n            dispatch(setAppStatusAC('succeeded'))\n        } else {\n            handleServerAppError(dispatch,res.data)\n        }\n    } catch (e) {\n        handleServerNetworkError(dispatch,e.message)\n    }\n}\n\nexport const updateTaskTC = (id: string, taskId: string, model: UpdateTaskDomainModelType):AppThunk =>\n    async (dispatch: Dispatch,getState: () => AppRootStateType) => {\n        try {\n            const state = getState()\n            const task = state.tasks[id].find(t => t.id === taskId)\n            if (!task) {\n                //throw new Error(\"task not found in the state\");\n                console.warn('task not found in the state')\n                return\n            }\n\n            const apiModel: UpdateTaskType = {\n                deadline: task.deadline,\n                description: task.description,\n                priority: task.priority,\n                startDate: task.startDate,\n                title: task.title,\n                status: task.status,\n                ...model\n            }\n            dispatch(setAppStatusAC('loading'))\n            const res = await todolistAPI.updateTask(apiModel, id, taskId)\n            if (res.data.resultCode === 0) {\n                dispatch(updateTask(id, taskId, model))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(dispatch,res.data)\n            }\n        } catch (e) {\n            handleServerNetworkError(dispatch, e.message)\n        }\n    }\n\n//types\nexport type UpdateTaskDomainModelType = {\n    title?: string\n    description?: string\n    status?: number\n    priority?: number\n    startDate?: string\n    deadline?: string\n}\nexport type TasksActionsType =\n    | ReturnType<typeof removeTask>\n    | ReturnType<typeof addTask>\n    | ReturnType<typeof updateTask>\n    | ReturnType<typeof setTasks>\n    | AddTodolistActionType\n    | RemoveTodoListActionType\n    | SetTodolistActionType\nexport type TaskStateType = {\n    [key: string]: TaskType[]\n}\n\n","import {todolistAPI, TodoListType} from \"../../api/todolist-api\";\nimport {AppThunk} from \"../../app/store\";\nimport {RequestStatusType, setAppStatusAC} from \"../../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error\";\n\nconst initialState: Array<TodolistDomainType> = []\nexport const todoListsReducer = (state: Array<TodolistDomainType> = initialState, action: TodolistsActionsType):Array<TodolistDomainType> => {\n    switch (action.type) {\n        case \"REMOVE-TODOLIST\":\n            return state.filter(tl => tl.id !== action.todoListId)\n        case \"ADD-TODOLIST\":\n            return [{...action.todolist, filter: \"all\",entityStatus: 'idle'},...state]\n        case \"CHANGE-TODOLIST-TITLE\":\n            return state.map(tl => tl.id === action.todoListId ? {...tl,title: action.title} : tl)\n        case \"CHANGE-TODOLIST-FILTER\":\n            return state.map(tl => tl.id === action.todoListId ? {...tl,filter: action.filter} : tl)\n        case \"SET-TODOLIST\":\n            return action.todolists.map(tl => ({...tl, filter: \"all\", entityStatus: 'idle'}))\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\n            return state.map(tl => tl.id === action.id ? {...tl,entityStatus: action.entityStatus} : tl)\n        default:\n            return state\n    }\n}\n\n//actions\nexport const removeTodoList = (todoListId: string) => ({type: \"REMOVE-TODOLIST\", todoListId} as const)\nexport const addTodolist = (todolist: TodoListType) => ({type: \"ADD-TODOLIST\", todolist} as const)\nexport const changeTodoListTitle = (todoListId: string, title: string) =>\n    ({type: \"CHANGE-TODOLIST-TITLE\", todoListId, title} as const)\nexport const changeTodoListFilterAC = (todoListId: string, filter: FilterValuesType) =>\n    ({type: \"CHANGE-TODOLIST-FILTER\", todoListId, filter} as const)\nexport const setTodolists = (todolists: TodoListType[]) => ({type: 'SET-TODOLIST', todolists} as const)\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, entityStatus} as const)\n\n//thunks\nexport const fetchTodolistTC = ():AppThunk => async dispatch => {\n    try {\n        dispatch(setAppStatusAC('loading'))\n        const res = await todolistAPI.getTodolists()\n        dispatch(setTodolists(res.data))\n        dispatch(setAppStatusAC('succeeded'))\n    } catch (e) {\n        handleServerNetworkError(dispatch, e.message)\n    }\n}\n\nexport const addTodolistTC = (title: string):AppThunk => async dispatch => {\n    try{\n        dispatch(setAppStatusAC('loading'))\n        const res = await todolistAPI.createTodolist(title)\n        if(res.data.resultCode === 0){\n            dispatch(addTodolist(res.data.data.item))\n            dispatch(setAppStatusAC('succeeded'))\n        } else {\n            handleServerAppError(dispatch,res.data)\n        }\n    } catch (e) {\n        handleServerNetworkError(dispatch, e.message)\n    }\n}\n\nexport const removeTodolistTC = (id: string):AppThunk => async dispatch => {\n    try {\n        dispatch(setAppStatusAC('loading'))\n        dispatch(changeTodolistEntityStatusAC(id, \"loading\"))\n        const res = await todolistAPI.deleteTodolist(id)\n        if (res.data.resultCode === 0) {\n            dispatch(removeTodoList(id))\n            dispatch(setAppStatusAC('succeeded'))\n        } else {\n            handleServerAppError(dispatch,res.data)\n        }\n    } catch (e) {\n        handleServerNetworkError(dispatch, e.message)\n    }\n}\n\nexport const changeTodolistTitleTC = (id: string, title: string):AppThunk => async dispatch => {\n    try {\n        dispatch(setAppStatusAC('loading'))\n        const res = await todolistAPI.updateTodolist(id, title)\n        if(res.data.resultCode === 0) {\n            dispatch(changeTodoListTitle(id, title))\n            dispatch(setAppStatusAC('succeeded'))\n        } else {\n            handleServerAppError(dispatch,res.data)\n        }\n    } catch (e) {\n        handleServerNetworkError(dispatch, e.message)\n    }\n}\n\n//types\nexport type RemoveTodoListActionType = ReturnType<typeof removeTodoList>\nexport type AddTodolistActionType = ReturnType<typeof addTodolist>\nexport type SetTodolistActionType = ReturnType<typeof setTodolists>\nexport type TodolistsActionsType =\n    | RemoveTodoListActionType\n    | AddTodolistActionType\n    | ReturnType<typeof changeTodoListTitle>\n    | ReturnType<typeof changeTodoListFilterAC>\n    | SetTodolistActionType\n    | ReturnType<typeof changeTodolistEntityStatusAC>\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\nexport type TodolistDomainType = TodoListType & {\n    filter: FilterValuesType\n    entityStatus: RequestStatusType\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {TasksActionsType, tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\nimport {TodolistsActionsType, todoListsReducer} from \"../features/TodolistsList/todolists-reducer\";\nimport thunk, {ThunkAction} from \"redux-thunk\";\nimport {AppActionsType, appReducer} from \"./app-reducer\";\nimport {AuthActionType, authReducer} from \"../features/Login/auth-reducer\";\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\nexport type ActionsType = TodolistsActionsType | TasksActionsType | AppActionsType | AuthActionType\nexport type AppThunk<ReturnType = void> = ThunkAction<void,AppRootStateType,unknown,ActionsType>\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todoListsReducer,\n    app: appReducer,\n    auth: authReducer\n})\n\nexport const store = createStore(rootReducer,applyMiddleware(thunk))\n// @ts-ignore\nwindow.store = store","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {ControlPoint} from \"@material-ui/icons\";\nimport {RequestStatusType} from \"../../app/app-reducer\";\n\nexport type AddItemFormPropsType = {\n    addItem: (title: string) => void\n    entityStatus?: RequestStatusType\n}\n\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\n    const [title, setTitle] = useState<string>(\"\")\n    const [error, setError] = useState<string | null>(null)\n\n    const addItem = () => {\n        const trimTitle = title.trim()\n        if (trimTitle) {\n            props.addItem(trimTitle)\n            setTitle(\"\")\n        } else {\n            setError(\"Title is required!\")\n        }\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null)\n        }\n        if (e.key === \"Enter\") {\n            addItem()\n        }\n    }\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return (\n        <div>\n            <TextField variant={'outlined'}\n                       label={'title'}\n                       error={!!error}\n                       helperText={error}\n                       value={title}\n                       onChange={onChangeHandler}\n                       onKeyPress={onKeyPressHandler}\n                       disabled={props.entityStatus === 'loading'}\n                       />\n            <IconButton color={\"primary\"} onClick={addItem} disabled={props.entityStatus === 'loading'}>\n                <ControlPoint/>\n            </IconButton>\n        </div>\n    )\n})","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\nimport {RequestStatusType} from \"../../app/app-reducer\";\n\nexport type EditableSpanPropsType = {\n    title: string\n    changeTitle: (newTitle: string) => void\n    entityStatus?: RequestStatusType\n}\n\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n    console.log(\"EditableSpan\")\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [title, setTitle] = useState<string>(props.title)\n\n    const onEditMode = () => setEditMode(true)\n    const offEditMode = () => {\n        setEditMode(false)\n        props.changeTitle(title)\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return (\n        editMode\n            ? <TextField value={title}\n                         autoFocus\n                         onChange={changeTitle}\n                         onKeyPress={e => {if (e.key === \"Enter\") {offEditMode()}}}\n                         onBlur={offEditMode}\n                         disabled={props.entityStatus === 'loading'}\n            />\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\n    )\n});","import React, {ChangeEvent, useCallback} from 'react'\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\nimport {RequestStatusType} from \"../../../../app/app-reducer\";\n\n\nexport type TaskPropsType = {\n    task: TaskType\n    todoListId: string\n    changeTaskTitle: (id: string, taskID: string, newTitle: string) => void\n    changeTaskStatus:(id: string, taskID: string, status: TaskStatuses) => void\n    removeTask: (id: string, taskID: string) => void\n    entityStatus?: RequestStatusType\n}\n\nexport const Task:React.FC<TaskPropsType> = React.memo(({task,todoListId,changeTaskTitle,\n                                                            changeTaskStatus,removeTask, entityStatus}) => {\n    console.log(\"Task\")\n    const onRemoveTaskClickHandler = useCallback(() => removeTask(todoListId,task.id),\n        [removeTask,task.id,todoListId])\n    const changeTaskStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) =>\n        changeTaskStatus(todoListId, task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New)\n        ,[changeTaskStatus,task.id,todoListId])\n    const changeTitle = useCallback((newTitle: string) => {\n        changeTaskTitle(todoListId, task.id, newTitle)},[changeTaskTitle,task.id,todoListId])\n    return (\n        <div key={task.id} style={{position: 'relative'}}>\n            <Checkbox onChange={changeTaskStatusHandler}\n                      disabled={entityStatus === 'loading'}\n                      checked={task.status === TaskStatuses.Completed} />\n            <EditableSpan title={task.title} changeTitle={changeTitle} entityStatus={entityStatus}/>\n            <IconButton disabled={entityStatus === 'loading'}\n                        onClick={onRemoveTaskClickHandler}\n                        style={{ position: 'absolute', right: '5px'} }>\n                <Delete/>\n            </IconButton>\n        </div>)\n})\n\n\n","import React, {useCallback, useEffect} from \"react\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {Task} from \"./Task/Task\";\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\nimport {FilterValuesType, TodolistDomainType} from \"../todolists-reducer\";\nimport {useDispatch} from \"react-redux\";\nimport {fetchTasksTC} from \"../tasks-reducer\";\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\nimport {RequestStatusType} from \"../../../app/app-reducer\";\n\ntype TodoListPropsType = {\n    todolist: TodolistDomainType\n    entityStatus: RequestStatusType\n    tasks: Array<TaskType>\n    changeTodoListFilter: (id: string, newFilterValue: FilterValuesType) => void\n    addTask: (id: string, title: string) => void\n    removeTodoList: (id: string) => void\n    changeTaskTitle: (id: string, taskID: string, newTitle: string) => void\n    changeTaskStatus: (id: string, taskID: string, status: TaskStatuses) => void\n    removeTask: (id: string, taskID: string) => void\n    changeTodoListTitle: (id: string, newTitle: string) => void\n    demo?: boolean\n}\n\nexport const Todolist = React.memo(({demo = false, ...props}: TodoListPropsType) => {\n\n    useEffect(() => {\n        if (demo) {\n            return\n        }\n        dispatch(fetchTasksTC(props.todolist.id))\n    }, [])\n\n    const dispatch = useDispatch()\n    let tasksForTodoList = props.tasks\n    if (props.todolist.filter === \"active\") {\n        tasksForTodoList = tasksForTodoList.filter(t => t.status === TaskStatuses.New)\n    }\n    if (props.todolist.filter === \"completed\") {\n        tasksForTodoList = tasksForTodoList.filter(t => t.status === TaskStatuses.Completed)\n    }\n\n    const tasks = tasksForTodoList.map(t =>\n        <Task key={t.id} task={t} todoListId={props.todolist.id} changeTaskTitle={props.changeTaskTitle}\n              changeTaskStatus={props.changeTaskStatus} removeTask={props.removeTask}\n              entityStatus={props.entityStatus}/>\n    )\n\n    const addTask = useCallback((title: string) => props.addTask(props.todolist.id, title), [props.addTask, props.todolist.id])\n    const removeTodoList = () => {\n        props.removeTodoList(props.todolist.id)\n    }\n    const changeTodolistTitle = useCallback((title: string) => {\n            props.changeTodoListTitle(props.todolist.id, title)\n        },\n        [props.changeTodoListTitle, props.todolist.id])\n\n    const onAllClickHandler = useCallback(() => {\n            props.changeTodoListFilter(props.todolist.id, 'all')\n        },\n        [props.changeTodoListFilter, props.todolist.id])\n\n    const onActiveClickHandler = useCallback(() => {\n            props.changeTodoListFilter(props.todolist.id, 'active')\n        },\n        [props.changeTodoListFilter, props.todolist.id])\n\n    const onCompletedClickHandler = useCallback(() => {\n        props.changeTodoListFilter(props.todolist.id, 'completed')\n    }, [props.changeTodoListFilter, props.todolist.id])\n\n    return (\n        <div style={{padding: '10px', position: 'relative'}}>\n            <h3>\n                <EditableSpan title={props.todolist.title} changeTitle={changeTodolistTitle}\n                              entityStatus={props.entityStatus}/>\n                <IconButton onClick={removeTodoList}\n                            style={{position: 'absolute', right: '2px', top: '2px'}}\n                            size={\"small\"}\n                            disabled={props.entityStatus === 'loading'}\n                >\n                    <Delete/>\n                </IconButton></h3>\n            <AddItemForm addItem={addTask} entityStatus={props.entityStatus}/>\n            <div>\n                {tasks}\n                {!tasksForTodoList.length && <div style={{padding: '10px', color: 'grey'}}>No task</div>}\n            </div>\n            <div>\n                <Button onClick={onAllClickHandler}\n                        size={\"small\"}\n                        variant={props.todolist.filter === \"all\" ? \"contained\" : \"text\"}\n                >All</Button>\n                <Button onClick={onActiveClickHandler}\n                        size={\"small\"}\n                        variant={props.todolist.filter === \"active\" ? \"contained\" : \"text\"}\n                        color={\"primary\"}\n                >Active</Button>\n                <Button onClick={onCompletedClickHandler}\n                        size={\"small\"}\n                        variant={props.todolist.filter === \"completed\" ? \"contained\" : \"text\"}\n                        color={\"secondary\"}\n                >Completed</Button>\n            </div>\n        </div>\n    );\n})\n","import React, {useCallback, useEffect} from \"react\";\nimport {addTodolistTC,\n    changeTodoListFilterAC,\n    changeTodolistTitleTC,\n    fetchTodolistTC,\n    FilterValuesType,\n    removeTodolistTC,\n    TodolistDomainType\n} from \"./todolists-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {addTaskTC, removeTaskTC, TaskStateType, updateTaskTC} from \"./tasks-reducer\";\nimport {TaskStatuses} from \"../../api/todolist-api\";\nimport {Grid, Paper} from \"@material-ui/core\";\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\nimport {Todolist} from \"./TodoList/TodoList\";\nimport {Redirect} from \"react-router-dom\";\n\ntype PropsType = {\n    demo?: boolean\n}\n\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\n\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const todolists = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todolists)\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        if (demo || !isLoggedIn){\n            return\n        }\n        dispatch(fetchTodolistTC())\n    }, [])\n\n\n    const addTask = useCallback((id: string, title: string) => {\n        dispatch(addTaskTC(id, title))\n    }, [dispatch])\n\n    const removeTask = useCallback((id: string, taskID: string) => {\n        dispatch(removeTaskTC(id, taskID))\n    }, [dispatch])\n\n    const changeTaskStatus = useCallback((id: string, taskID: string, status: TaskStatuses) => {\n        dispatch(updateTaskTC(id, taskID, {status}))\n    }, [dispatch])\n\n    const changeTaskTitle = useCallback((id: string, taskID: string, newTitle: string) => {\n        dispatch(updateTaskTC(id, taskID, {title: newTitle}))\n    }, [dispatch])\n\n    const addTodoList = useCallback((title: string) => {\n        dispatch(addTodolistTC(title))\n    }, [dispatch])\n\n    const changeTodoListFilter = useCallback((id: string, newFilterValue: FilterValuesType) => {\n        dispatch(changeTodoListFilterAC(id, newFilterValue))\n    }, [dispatch])\n\n    const removeTodoList = useCallback((id: string) => {\n        dispatch(removeTodolistTC(id))\n    }, [dispatch])\n\n    const changeTodoListTitle = useCallback((id: string, newTitle: string) => {\n        dispatch(changeTodolistTitleTC(id, newTitle))\n    }, [dispatch])\n\n    if (!isLoggedIn){\n        return <Redirect to={'/login'}/>\n    }\n\n    return (\n        <>\n            <Grid container style={{padding: \"20px\"}}>\n                <div>\n                    <h3>add new todolist</h3>\n                    <div><AddItemForm addItem={addTodoList}/></div>\n                </div>\n            </Grid>\n            <Grid container spacing={3}>\n                {todolists.map(tl => {\n                    return <Grid item key={tl.id}>\n                        <Paper style={{padding: \"10px\"}}>\n                            <Todolist\n                                key={tl.id}\n                                todolist={tl}\n                                tasks={tasks[tl.id]}\n                                entityStatus={tl.entityStatus}\n                                removeTask={removeTask}\n                                changeTodoListFilter={changeTodoListFilter}\n                                addTask={addTask}\n                                changeTaskStatus={changeTaskStatus}\n                                removeTodoList={removeTodoList}\n                                changeTaskTitle={changeTaskTitle}\n                                changeTodoListTitle={changeTodoListTitle}\n                                demo={demo}\n                            />\n                        </Paper>\n                    </Grid>\n                })}\n            </Grid>\n        </>\n    )\n}","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {setAppErrorAC} from \"../../app/app-reducer\";\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport function ErrorSnackbar() {\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\n    const dispatch = useDispatch()\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return\n        }\n        dispatch(setAppErrorAC(null))\n    }\n\n    return (\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\">\n                {error}\n            </Alert>\n        </Snackbar>\n    )\n}\n","import React, {useEffect} from 'react'\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\nimport {useFormik} from \"formik\";\nimport {loginTC} from \"./auth-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {Redirect} from \"react-router-dom\";\n\nexport const Login = () => {\n    const dispatch = useDispatch()\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'E-mail required!';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Password required!';\n            } else if (values.password.length < 2) {\n                errors.password = 'Password must be at least 2 characters long';\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values))\n            formik.resetForm();\n        }\n    })\n\n    if (isLoggedIn) {\n        return <Redirect to={'/'}/>\n    }\n\n    return <Grid container justify=\"center\">\n        <Grid item xs={4}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a href={'https://social-network.samuraijs.com/'}\n                               target={'_blank'}>here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField\n                            label=\"Email\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps('email')}\n                        />\n                        {formik.touched.email && formik.errors.email &&\n                        <div style={{color: 'red'}}>{formik.errors.email}</div>}\n                        <TextField\n                            type=\"password\"\n                            label=\"Password\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps('password')}\n                        />\n                        {formik.touched.password && formik.errors.password &&\n                        <div style={{color: 'red'}}>{formik.errors.password}</div>}\n                        <FormControlLabel\n                            label={'Remember me'}\n                            control={<Checkbox\n                                checked={formik.values.rememberMe}\n                                {...formik.getFieldProps('rememberMe')}\n                            />}\n                        />\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}\n//types\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n\n","import React, {useCallback, useEffect} from 'react';\nimport './App.css';\nimport {\n    AppBar,\n    Button,\n    CircularProgress,\n    Container,\n    IconButton,\n    LinearProgress,\n    Toolbar,\n    Typography\n} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./store\";\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\nimport {ErrorSnackbar} from \"../components/ ErrorSnackbar/ErrorSnackbar\";\nimport {Login} from \"../features/Login/Login\";\nimport {BrowserRouter, Redirect, Route, Switch} from 'react-router-dom';\nimport {logoutTC} from \"../features/Login/auth-reducer\";\n\ntype PropsType = {\n    demo?: boolean\n}\n\nfunction App({demo = false}: PropsType) {\n\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\n\n    useEffect(() => {\n        dispatch(initializeAppTC())\n    },[])\n\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\n\n    const logoutHandler = useCallback(() => {\n        dispatch(logoutTC())\n    },[])\n\n    if (!isInitialized) {\n        return <div\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n            <CircularProgress/>\n        </div>\n    }\n\n    return (\n        <BrowserRouter>\n            <div className=\"App\">\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                            <Menu/>\n                        </IconButton>\n                        <Typography variant=\"h6\">\n                        </Typography>\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\n                    </Toolbar>\n                </AppBar>\n                {status === \"loading\" && <LinearProgress color=\"secondary\" />}\n                <Container fixed>\n                    <Switch>\n                        <Route exact path={'/'} render={ () => <TodolistsList demo={demo}/> }/>\n                        <Route path={'/login'} render={ () => <Login/> }/>\n                        <Route path={ '/404' } render={ () => <h1 style={{textAlign: 'center',fontSize: '50px'}}>404: PAGE NOT FOUND</h1> }/>\n                        <Redirect from={'*'} to={'/404'}/>\n                    </Switch>\n                </Container>\n                <ErrorSnackbar/>\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport App from \"./app/App\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}