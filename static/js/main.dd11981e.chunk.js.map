{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","utils/error.ts","features/TodolistsList/todolists-reducer.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/TodoList/Task/Task.tsx","features/TodolistsList/TodoList/TodoList.tsx","features/TodolistsList/TodolistsList.tsx","components/ ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","authAPI","data","post","get","delete","todolistAPI","todolistId","title","put","taskID","model","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","message","initialState","changeTodoListTitle","todoListId","type","changeTodolistEntityStatusAC","id","entityStatus","isLoggedIn","setIsLoggedInAC","value","status","error","isInitialized","removeTask","taskId","updateTask","fetchTasksTC","a","res","tasks","items","updateTaskTC","getState","state","task","find","t","console","warn","apiModel","deadline","description","priority","startDate","resultCode","rootReducer","combineReducers","action","filter","map","todolist","stateCopy","todolists","forEach","tl","app","auth","store","createStore","applyMiddleware","thunk","AddItemForm","React","memo","props","useState","setTitle","setError","addItem","trimTitle","trim","TextField","variant","label","helperText","onChange","e","currentTarget","onKeyPress","key","disabled","IconButton","color","onClick","AddBox","EditableSpan","log","editMode","setEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","Task","changeTaskTitle","changeTaskStatus","onRemoveTaskClickHandler","useCallback","changeTaskStatusHandler","checked","Completed","New","newTitle","style","position","Checkbox","right","Delete","Todolist","demo","tasksForTodoList","addTask","changeTodolistTitle","onAllClickHandler","changeTodoListFilter","onActiveClickHandler","onCompletedClickHandler","padding","removeTodoList","top","size","Button","TodolistsList","useSelector","useDispatch","useEffect","item","addTaskTC","removeTaskTC","addTodoList","addTodolistTC","newFilterValue","removeTodolistTC","changeTodolistTitleTC","Grid","container","spacing","Paper","elevation","to","Alert","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","logoutHandler","className","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","textAlign","fontSize","from","width","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.dd11981e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': '3968e2e7-ef1b-4e58-9108-d41e4dea47f4'\n    }\n})\n\nexport const authAPI = {\n    login(data: LoginParamsType) {\n        return instance.post<ResponseType<{userId?: number}>>('auth/login', data)\n    },\n    me() {\n        return instance.get<ResponseType<{id: number; email: string; login: string }>>('/auth/me')\n    },\n    logout(){\n        return instance.delete('auth/login')\n    }\n}\n\nexport const todolistAPI = {\n    updateTodolist(todolistId: string, title: string) {\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title: title})\n    },\n    deleteTodolist(todolistId: string){\n       return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\n    },\n    createTodolist(title: string){\n        return instance.post<ResponseType<{item: TodoListType}>>('todo-lists', {title: title})\n    },\n    getTodolists(){\n        return instance.get<TodoListType[]>('todo-lists')\n    },\n    getTasks(todolistId: string){\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\n    },\n    createTask(todolistId: string, title: string){\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: title})\n    },\n    deleteTask(todolistId: string, taskID: string){\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskID}`)\n    },\n    updateTask(model: UpdateTaskType,todolistId: string, taskID: string){\n        return instance.put<ResponseType<{item: TaskType}>>(`/todo-lists/${todolistId}/tasks/${taskID}`,model)\n    }\n}\n\n//types\nexport type AuthMeType = {\n    id: number\n    email: string\n    login: string\n}\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: string\n}\nexport type TodoListType = {\n    id: string\n    addedDate: string\n    order: number\n    title: string\n}\nexport type ResponseType<T = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: T\n}\nexport type UpdateTaskType = {\n    title: string\n    description: string\n    status: number\n    priority: number\n    startDate: string\n    deadline: string\n}\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\nexport type GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../app/app-reducer\";\nimport {Dispatch} from \"redux\";\nimport {ResponseType} from \"../api/todolist-api\";\n\nexport const handleServerAppError = <T>(dispatch: Dispatch<ErrorsActionType>, data: ResponseType<T>) => {\n    if (data.messages.length) {\n        dispatch(setAppErrorAC(data.messages[0]))\n    } else {\n        dispatch(setAppErrorAC('ERROR'))\n    }\n    dispatch(setAppStatusAC('failed'))\n}\n\nexport const handleServerNetworkError = (dispatch: Dispatch<ErrorsActionType>, message: string) => {\n    dispatch(setAppErrorAC(message))\n    dispatch(setAppStatusAC('failed'))\n}\n\ntype ErrorsActionType = SetAppErrorActionType | SetAppStatusActionType","import {todolistAPI, TodoListType} from \"../../api/todolist-api\";\nimport {AppThunk} from \"../../app/store\";\nimport {RequestStatusType, setAppStatusAC} from \"../../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error\";\nimport {fetchTasksTC} from \"./tasks-reducer\";\n\nconst initialState: Array<TodolistDomainType> = []\nexport const todoListsReducer = (state: Array<TodolistDomainType> = initialState, action: TodolistsActionsType):Array<TodolistDomainType> => {\n    switch (action.type) {\n        case \"REMOVE-TODOLIST\":\n            return state.filter(tl => tl.id !== action.todoListId)\n        case \"ADD-TODOLIST\":\n            return [{...action.todolist, filter: \"all\",entityStatus: 'idle'},...state]\n        case \"CHANGE-TODOLIST-TITLE\":\n            return state.map(tl => tl.id === action.todoListId ? {...tl,title: action.title} : tl)\n        case \"CHANGE-TODOLIST-FILTER\":\n            return state.map(tl => tl.id === action.todoListId ? {...tl,filter: action.filter} : tl)\n        case \"SET-TODOLIST\":\n            return action.todolists.map(tl => ({...tl, filter: \"all\", entityStatus: 'idle'}))\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\n            return state.map(tl => tl.id === action.id ? {...tl,entityStatus: action.entityStatus} : tl)\n        case \"CLEAR-DATA\":\n            return []\n        default:\n            return state\n    }\n}\n\n//actions\nexport const removeTodoList = (todoListId: string) => ({type: \"REMOVE-TODOLIST\", todoListId} as const)\nexport const addTodolist = (todolist: TodoListType) => ({type: \"ADD-TODOLIST\", todolist} as const)\nexport const changeTodoListTitle = (todoListId: string, title: string) =>\n    ({type: \"CHANGE-TODOLIST-TITLE\", todoListId, title} as const)\nexport const changeTodoListFilterAC = (todoListId: string, filter: FilterValuesType) =>\n    ({type: \"CHANGE-TODOLIST-FILTER\", todoListId, filter} as const)\nexport const setTodolists = (todolists: TodoListType[]) => ({type: 'SET-TODOLIST', todolists} as const)\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, entityStatus} as const)\nexport const clearTodosData = () => ({type: 'CLEAR-DATA'} as const)\n\n\n//thunks\nexport const fetchTodolistTC = ():AppThunk => async dispatch => {\n    try {\n        dispatch(setAppStatusAC('loading'))\n        const res = await todolistAPI.getTodolists()\n        dispatch(setTodolists(res.data))\n        dispatch(setAppStatusAC('succeeded'))\n        res.data.forEach((tl) => {\n            dispatch(fetchTasksTC(tl.id))})\n    } catch (e) {\n        handleServerNetworkError(dispatch, e.message)\n    }\n}\n\nexport const addTodolistTC = (title: string):AppThunk => async dispatch => {\n    try{\n        dispatch(setAppStatusAC('loading'))\n        const res = await todolistAPI.createTodolist(title)\n        if(res.data.resultCode === 0){\n            dispatch(addTodolist(res.data.data.item))\n            dispatch(setAppStatusAC('succeeded'))\n        } else {\n            handleServerAppError(dispatch,res.data)\n        }\n    } catch (e) {\n        handleServerNetworkError(dispatch, e.message)\n    }\n}\n\nexport const removeTodolistTC = (id: string):AppThunk => async dispatch => {\n    try {\n        dispatch(setAppStatusAC('loading'))\n        dispatch(changeTodolistEntityStatusAC(id, \"loading\"))\n        const res = await todolistAPI.deleteTodolist(id)\n        if (res.data.resultCode === 0) {\n            dispatch(removeTodoList(id))\n            dispatch(setAppStatusAC('succeeded'))\n        } else {\n            handleServerAppError(dispatch,res.data)\n        }\n    } catch (e) {\n        handleServerNetworkError(dispatch, e.message)\n    }\n}\n\nexport const changeTodolistTitleTC = (id: string, title: string):AppThunk => async dispatch => {\n    try {\n        dispatch(setAppStatusAC('loading'))\n        const res = await todolistAPI.updateTodolist(id, title)\n        if(res.data.resultCode === 0) {\n            dispatch(changeTodoListTitle(id, title))\n            dispatch(setAppStatusAC('succeeded'))\n        } else {\n            handleServerAppError(dispatch,res.data)\n        }\n    } catch (e) {\n        handleServerNetworkError(dispatch, e.message)\n    }\n}\n\n//types\nexport type RemoveTodoListActionType = ReturnType<typeof removeTodoList>\nexport type AddTodolistActionType = ReturnType<typeof addTodolist>\nexport type SetTodolistActionType = ReturnType<typeof setTodolists>\nexport type ClearDataActionType = ReturnType<typeof clearTodosData>\nexport type TodolistsActionsType =\n    | RemoveTodoListActionType\n    | AddTodolistActionType\n    | ReturnType<typeof changeTodoListTitle>\n    | ReturnType<typeof changeTodoListFilterAC>\n    | SetTodolistActionType\n    | ReturnType<typeof changeTodolistEntityStatusAC>\n    | ClearDataActionType\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\nexport type TodolistDomainType = TodoListType & {\n    filter: FilterValuesType\n    entityStatus: RequestStatusType\n}\n","import {setAppStatusAC} from '../../app/app-reducer'\nimport {authAPI, LoginParamsType} from \"../../api/todolist-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error\";\nimport {AppThunk} from \"../../app/store\";\nimport {clearTodosData} from \"../TodolistsList/todolists-reducer\";\n\nconst initialState = {\n    isLoggedIn: false\n}\n\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionType): InitialStateType => {\n    switch (action.type) {\n        case 'login/SET-IS-LOGGED-IN':\n            return {...state, isLoggedIn: action.value}\n        default:\n            return state\n    }\n}\n\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\n// thunks\nexport const loginTC = (data: LoginParamsType):AppThunk => async dispatch => {\n    try {\n        dispatch(setAppStatusAC('loading'))\n        const res = await authAPI.login(data)\n        if(res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC(true))\n            dispatch(setAppStatusAC('succeeded'))\n        } else {\n            handleServerAppError(dispatch,res.data)\n        }\n    } catch (e) {\n        handleServerNetworkError(dispatch, e.message)\n    }\n}\n\nexport const logoutTC = ():AppThunk => async dispatch => {\n    try {\n        dispatch(setAppStatusAC('loading'))\n        const res = await authAPI.logout()\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC(false))\n            dispatch(setAppStatusAC('succeeded'))\n            dispatch(clearTodosData())\n        } else {\n            handleServerAppError(dispatch,res.data)\n        }\n    } catch (e) {\n        handleServerNetworkError(dispatch,e.message)\n    }\n}\n\n\n// types\nexport type AuthActionType = ReturnType<typeof setIsLoggedInAC>\ntype InitialStateType = typeof initialState\n\n","import {authAPI} from \"../api/todolist-api\";\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error\";\nimport {AppThunk} from \"./store\";\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\nconst initialState = {\n    status: 'idle' as RequestStatusType,\n    error: null as string | null,\n    isInitialized: false\n}\n\nexport type InitialStateType = typeof initialState\n\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'APP/SET-STATUS':\n            return {...state, status: action.status}\n        case \"APP/SET-ERROR\":\n            return {...state, error: action.error}\n        case \"APP/SET-IS-INITIALIZED\":\n            return {...state, isInitialized: action.isInitialized}\n        default:\n            return state\n    }\n}\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: \"APP/SET-STATUS\", status} as const)\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\nexport const setAppIsInitializedAC = (isInitialized: boolean) => ({type: \"APP/SET-IS-INITIALIZED\", isInitialized} as const)\n\nexport const initializeAppTC = ():AppThunk => async dispatch => {\n    try {\n        const res = await authAPI.me()\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC(true));\n        } else {\n            handleServerAppError(dispatch,res.data)\n        }\n    } catch (e) {\n        handleServerNetworkError(dispatch, e.message)\n    } finally {\n        dispatch(setAppIsInitializedAC(true))\n    }\n}\n\n\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\nexport type AppActionsType = SetAppStatusActionType | SetAppErrorActionType | ReturnType<typeof setAppIsInitializedAC>\n","import {\n    AddTodolistActionType,\n    ClearDataActionType,\n    RemoveTodoListActionType,\n    SetTodolistActionType\n} from \"./todolists-reducer\";\nimport {TaskType, todolistAPI, UpdateTaskType} from \"../../api/todolist-api\";\nimport {AppRootStateType, AppThunk} from \"../../app/store\";\nimport {Dispatch} from \"redux\";\nimport {setAppStatusAC} from \"../../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error\";\n\nconst initialState: TaskStateType = {}\n\nexport const tasksReducer = (state: TaskStateType = initialState, action: TasksActionsType): TaskStateType => {\n    switch (action.type) {\n        case \"REMOVE-TASK\":\n            return {...state,[action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)}\n        case \"ADD-TASK\":\n            return {...state, [action.task.todoListId]: [...state[action.task.todoListId], action.task]}\n        case \"UPDATE-TASK\":\n            return {...state, [action.todoListId]: state[action.todoListId]\n                    .map(t => t.id === action.taskID ? {...t, ...action.model} : t)}\n        case \"ADD-TODOLIST\":\n            return {...state, [action.todolist.id]: []}\n        case \"REMOVE-TODOLIST\":\n            const stateCopy = {...state}\n            delete stateCopy[action.todoListId]\n            return stateCopy\n        case \"SET-TODOLIST\": {\n            const stateCopy = {...state}\n            action.todolists.forEach(tl => {\n                stateCopy[tl.id] = []\n            })\n            return stateCopy\n        }\n        case \"SET-TASKS\": {\n            return {...state, [action.todoListId]: action.tasks}\n        }\n        case \"CLEAR-DATA\":\n            return {}\n        default:\n            return state\n    }\n}\n\n//actions\nexport const removeTask = (todoListId: string, taskId: string ) => ({type: \"REMOVE-TASK\", todoListId, taskId} as const)\nexport const addTask = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\nexport const updateTask = (todoListId: string, taskID: string, model: UpdateTaskDomainModelType) => ({\n    type: \"UPDATE-TASK\", todoListId, taskID, model} as const)\nexport const setTasks = (tasks: TaskType[], todoListId: string) => ({type: 'SET-TASKS', tasks, todoListId} as const)\n\n//thunks\nexport const fetchTasksTC = (id: string): AppThunk => async dispatch => {\n    try {\n        dispatch(setAppStatusAC('loading'))\n        const res = await todolistAPI.getTasks(id)\n        dispatch(setTasks(res.data.items,id))\n        dispatch(setAppStatusAC('succeeded'))\n    } catch (e) {\n        handleServerNetworkError(dispatch,e.message)\n    }\n\n}\n\nexport const removeTaskTC = (id: string, taskId: string):AppThunk => async dispatch => {\n    try {\n        dispatch(setAppStatusAC('loading'))\n        const res = await todolistAPI.deleteTask(id, taskId)\n        if(res.data.resultCode === 0) {\n            dispatch(removeTask(id, taskId))\n            dispatch(setAppStatusAC('succeeded'))\n        } else {\n            handleServerAppError(dispatch,res.data)\n        }\n    } catch (e) {\n        handleServerNetworkError(dispatch,e.message)\n    }\n}\n\nexport const addTaskTC = (id: string, title: string):AppThunk => async dispatch => {\n    try {\n        dispatch(setAppStatusAC('loading'))\n        const res = await todolistAPI.createTask(id, title)\n        if (res.data.resultCode === 0) {\n            dispatch(addTask(res.data.data.item))\n            dispatch(setAppStatusAC('succeeded'))\n        } else {\n            handleServerAppError(dispatch,res.data)\n        }\n    } catch (e) {\n        handleServerNetworkError(dispatch,e.message)\n    }\n}\n\nexport const updateTaskTC = (id: string, taskId: string, model: UpdateTaskDomainModelType):AppThunk =>\n    async (dispatch: Dispatch,getState: () => AppRootStateType) => {\n        try {\n            const state = getState()\n            const task = state.tasks[id].find(t => t.id === taskId)\n            if (!task) {\n                //throw new Error(\"task not found in the state\");\n                console.warn('task not found in the state')\n                return\n            }\n\n            const apiModel: UpdateTaskType = {\n                deadline: task.deadline,\n                description: task.description,\n                priority: task.priority,\n                startDate: task.startDate,\n                title: task.title,\n                status: task.status,\n                ...model\n            }\n            dispatch(setAppStatusAC('loading'))\n            const res = await todolistAPI.updateTask(apiModel, id, taskId)\n            if (res.data.resultCode === 0) {\n                dispatch(updateTask(id, taskId, model))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(dispatch,res.data)\n            }\n        } catch (e) {\n            handleServerNetworkError(dispatch, e.message)\n        }\n    }\n\n//types\nexport type UpdateTaskDomainModelType = {\n    title?: string\n    description?: string\n    status?: number\n    priority?: number\n    startDate?: string\n    deadline?: string\n}\nexport type TasksActionsType =\n    | ReturnType<typeof removeTask>\n    | ReturnType<typeof addTask>\n    | ReturnType<typeof updateTask>\n    | ReturnType<typeof setTasks>\n    | AddTodolistActionType\n    | RemoveTodoListActionType\n    | SetTodolistActionType\n    | ClearDataActionType\nexport type TaskStateType = {\n    [key: string]: TaskType[]\n}\n\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {TasksActionsType, tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\nimport {TodolistsActionsType, todoListsReducer} from \"../features/TodolistsList/todolists-reducer\";\nimport thunk, {ThunkAction} from \"redux-thunk\";\nimport {AppActionsType, appReducer} from \"./app-reducer\";\nimport {AuthActionType, authReducer} from \"../features/Login/auth-reducer\";\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\nexport type ActionsType = TodolistsActionsType | TasksActionsType | AppActionsType | AuthActionType\nexport type AppThunk<ReturnType = void> = ThunkAction<void,AppRootStateType,unknown,ActionsType>\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todoListsReducer,\n    app: appReducer,\n    auth: authReducer\n})\n\nexport const store = createStore(rootReducer,applyMiddleware(thunk))\n// @ts-ignore\nwindow.store = store","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox, ControlPoint} from \"@material-ui/icons\";\nimport {RequestStatusType} from \"../../app/app-reducer\";\n\nexport type AddItemFormPropsType = {\n    addItem: (title: string) => void\n    entityStatus?: RequestStatusType\n}\n\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\n    const [title, setTitle] = useState<string>(\"\")\n    const [error, setError] = useState<string | null>(null)\n\n    const addItem = () => {\n        const trimTitle = title.trim()\n        if (trimTitle) {\n            props.addItem(trimTitle)\n            setTitle(\"\")\n        } else {\n            setError(\"Title is required!\")\n        }\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null)\n        }\n        if (e.key === \"Enter\") {\n            addItem()\n        }\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return (\n        <div>\n            <TextField variant={'outlined'}\n                       label={'title'}\n                       error={!!error}\n                       helperText={error}\n                       value={title}\n                       onChange={onChangeHandler}\n                       onKeyPress={onKeyPressHandler}\n                       disabled={props.entityStatus === 'loading'}\n                       />\n            <IconButton color={\"primary\"} onClick={addItem} disabled={props.entityStatus === 'loading'}>\n                <AddBox/>\n            </IconButton>\n        </div>\n    )\n})","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\nimport {RequestStatusType} from \"../../app/app-reducer\";\n\nexport type EditableSpanPropsType = {\n    title: string\n    changeTitle: (newTitle: string) => void\n    entityStatus?: RequestStatusType\n}\n\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n    console.log(\"EditableSpan\")\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [title, setTitle] = useState<string>(props.title)\n\n    const onEditMode = () => setEditMode(true)\n    const offEditMode = () => {\n        setEditMode(false)\n        props.changeTitle(title)\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return (\n        editMode\n            ? <TextField value={title}\n                         autoFocus\n                         onChange={changeTitle}\n                         onKeyPress={e => {if (e.key === \"Enter\") {offEditMode()}}}\n                         onBlur={offEditMode}\n                         disabled={props.entityStatus === 'loading'}\n            />\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\n    )\n});","import React, {ChangeEvent, useCallback} from 'react'\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\nimport {RequestStatusType} from \"../../../../app/app-reducer\";\n\n\nexport type TaskPropsType = {\n    task: TaskType\n    todoListId: string\n    changeTaskTitle: (id: string, taskID: string, newTitle: string) => void\n    changeTaskStatus:(id: string, taskID: string, status: TaskStatuses) => void\n    removeTask: (id: string, taskID: string) => void\n    entityStatus?: RequestStatusType\n}\n\nexport const Task:React.FC<TaskPropsType> = React.memo(({task,todoListId,changeTaskTitle,\n                                                            changeTaskStatus,removeTask, entityStatus}) => {\n    console.log(\"Task\")\n    const onRemoveTaskClickHandler = useCallback(() => removeTask(todoListId,task.id),\n        [removeTask,task.id,todoListId])\n    const changeTaskStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) =>\n        changeTaskStatus(todoListId, task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New)\n        ,[changeTaskStatus,task.id,todoListId])\n    const changeTitle = useCallback((newTitle: string) => {\n        changeTaskTitle(todoListId, task.id, newTitle)},[changeTaskTitle,task.id,todoListId])\n    return (\n        <div key={task.id} style={{position: 'relative'}}>\n            <Checkbox onChange={changeTaskStatusHandler}\n                      disabled={entityStatus === 'loading'}\n                      checked={task.status === TaskStatuses.Completed} />\n            <EditableSpan title={task.title} changeTitle={changeTitle} entityStatus={entityStatus}/>\n            <IconButton disabled={entityStatus === 'loading'}\n                        onClick={onRemoveTaskClickHandler}\n                        style={{ position: 'absolute', right: '5px'} }>\n                <Delete/>\n            </IconButton>\n        </div>)\n})\n\n\n","import React, {useCallback, useEffect} from \"react\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {Task} from \"./Task/Task\";\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\nimport {FilterValuesType, TodolistDomainType} from \"../todolists-reducer\";\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\nimport {RequestStatusType} from \"../../../app/app-reducer\";\n\ntype TodoListPropsType = {\n    todolist: TodolistDomainType\n    entityStatus: RequestStatusType\n    tasks: Array<TaskType>\n    changeTodoListFilter: (id: string, newFilterValue: FilterValuesType) => void\n    addTask: (id: string, title: string) => void\n    removeTodoList: (id: string) => void\n    changeTaskTitle: (id: string, taskID: string, newTitle: string) => void\n    changeTaskStatus: (id: string, taskID: string, status: TaskStatuses) => void\n    removeTask: (id: string, taskID: string) => void\n    changeTodoListTitle: (id: string, newTitle: string) => void\n    demo?: boolean\n}\n\nexport const Todolist = React.memo(({demo = false, ...props}: TodoListPropsType) => {\n\n    let tasksForTodoList = props.tasks\n    if (props.todolist.filter === \"active\") {\n        tasksForTodoList = tasksForTodoList.filter(t => t.status === TaskStatuses.New)\n    }\n    if (props.todolist.filter === \"completed\") {\n        tasksForTodoList = tasksForTodoList.filter(t => t.status === TaskStatuses.Completed)\n    }\n\n    const tasks = tasksForTodoList.map(t =>\n        <Task key={t.id} task={t} todoListId={props.todolist.id} changeTaskTitle={props.changeTaskTitle}\n              changeTaskStatus={props.changeTaskStatus} removeTask={props.removeTask}\n              entityStatus={props.entityStatus}/>\n    )\n\n    const addTask = useCallback((title: string) => props.addTask(props.todolist.id, title), [props.addTask, props.todolist.id])\n    const removeTodoList = () => {\n        props.removeTodoList(props.todolist.id)\n    }\n    const changeTodolistTitle = useCallback((title: string) => {\n            props.changeTodoListTitle(props.todolist.id, title)\n        },\n        [props.changeTodoListTitle, props.todolist.id])\n\n    const onAllClickHandler = useCallback(() => {\n            props.changeTodoListFilter(props.todolist.id, 'all')\n        },\n        [props.changeTodoListFilter, props.todolist.id])\n\n    const onActiveClickHandler = useCallback(() => {\n            props.changeTodoListFilter(props.todolist.id, 'active')\n        },\n        [props.changeTodoListFilter, props.todolist.id])\n\n    const onCompletedClickHandler = useCallback(() => {\n        props.changeTodoListFilter(props.todolist.id, 'completed')\n    }, [props.changeTodoListFilter, props.todolist.id])\n\n    return (\n        <div style={{padding: '10px', position: 'relative'}}>\n            <h3>\n                <EditableSpan title={props.todolist.title} changeTitle={changeTodolistTitle}\n                              entityStatus={props.entityStatus}/>\n                <IconButton onClick={removeTodoList}\n                            style={{position: 'absolute', right: '5px', top: '5px'}}\n                            size={\"small\"}\n                            disabled={props.entityStatus === 'loading'}\n                >\n                    <Delete/>\n                </IconButton></h3>\n            <AddItemForm addItem={addTask} entityStatus={props.entityStatus}/>\n            <div>\n                {tasks}\n                {!tasksForTodoList.length && <div style={{padding: '10px', color: 'grey'}}>No task</div>}\n            </div>\n            <div>\n                <Button onClick={onAllClickHandler}\n                        size={\"small\"}\n                        variant={props.todolist.filter === \"all\" ? \"contained\" : \"text\"}\n                >All</Button>\n                <Button onClick={onActiveClickHandler}\n                        size={\"small\"}\n                        variant={props.todolist.filter === \"active\" ? \"contained\" : \"text\"}\n                        color={\"primary\"}\n                >Active</Button>\n                <Button onClick={onCompletedClickHandler}\n                        size={\"small\"}\n                        variant={props.todolist.filter === \"completed\" ? \"contained\" : \"text\"}\n                        color={\"secondary\"}\n                >Completed</Button>\n            </div>\n        </div>\n    );\n})\n","import React, {useCallback, useEffect} from \"react\";\nimport {addTodolistTC,\n    changeTodoListFilterAC,\n    changeTodolistTitleTC,\n    fetchTodolistTC,\n    FilterValuesType,\n    removeTodolistTC,\n    TodolistDomainType\n} from \"./todolists-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {addTaskTC, removeTaskTC, TaskStateType, updateTaskTC} from \"./tasks-reducer\";\nimport {TaskStatuses} from \"../../api/todolist-api\";\nimport {Grid, Paper} from \"@material-ui/core\";\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\nimport {Todolist} from \"./TodoList/TodoList\";\nimport {Redirect} from \"react-router-dom\";\n\ntype PropsType = {\n    demo?: boolean\n}\n\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\n\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const todolists = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todolists)\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        if (demo || !isLoggedIn){\n            return\n        }\n        dispatch(fetchTodolistTC())\n    }, [])\n\n\n    const addTask = useCallback((id: string, title: string) => {\n        dispatch(addTaskTC(id, title))\n    }, [dispatch])\n\n    const removeTask = useCallback((id: string, taskID: string) => {\n        dispatch(removeTaskTC(id, taskID))\n    }, [dispatch])\n\n    const changeTaskStatus = useCallback((id: string, taskID: string, status: TaskStatuses) => {\n        dispatch(updateTaskTC(id, taskID, {status}))\n    }, [dispatch])\n\n    const changeTaskTitle = useCallback((id: string, taskID: string, newTitle: string) => {\n        dispatch(updateTaskTC(id, taskID, {title: newTitle}))\n    }, [dispatch])\n\n    const addTodoList = useCallback((title: string) => {\n        dispatch(addTodolistTC(title))\n    }, [dispatch])\n\n    const changeTodoListFilter = useCallback((id: string, newFilterValue: FilterValuesType) => {\n        dispatch(changeTodoListFilterAC(id, newFilterValue))\n    }, [dispatch])\n\n    const removeTodoList = useCallback((id: string) => {\n        dispatch(removeTodolistTC(id))\n    }, [dispatch])\n\n    const changeTodoListTitle = useCallback((id: string, newTitle: string) => {\n        dispatch(changeTodolistTitleTC(id, newTitle))\n    }, [dispatch])\n\n    if (!isLoggedIn){\n        return <Redirect to={'/login'}/>\n    }\n\n    return (\n        <>\n            <Grid container style={{padding: \"15px\"}}>\n                <div>\n                    <h3>add new todolist</h3>\n                    <div><AddItemForm addItem={addTodoList}/></div>\n                </div>\n            </Grid>\n            <Grid container={true} spacing={5}>\n                {todolists.map(tl => {\n                    return <Grid item key={tl.id}>\n                        <Paper style={{padding: \"15px\"}} elevation={3}>\n                            <Todolist\n                                key={tl.id}\n                                todolist={tl}\n                                tasks={tasks[tl.id]}\n                                entityStatus={tl.entityStatus}\n                                removeTask={removeTask}\n                                changeTodoListFilter={changeTodoListFilter}\n                                addTask={addTask}\n                                changeTaskStatus={changeTaskStatus}\n                                removeTodoList={removeTodoList}\n                                changeTaskTitle={changeTaskTitle}\n                                changeTodoListTitle={changeTodoListTitle}\n                                demo={demo}\n                            />\n                        </Paper>\n                    </Grid>\n                })}\n            </Grid>\n        </>\n    )\n}","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {setAppErrorAC} from \"../../app/app-reducer\";\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport function ErrorSnackbar() {\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\n    const dispatch = useDispatch()\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return\n        }\n        dispatch(setAppErrorAC(null))\n    }\n\n    return (\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\">\n                {error}\n            </Alert>\n        </Snackbar>\n    )\n}\n","import React, {useEffect} from 'react'\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\nimport {useFormik} from \"formik\";\nimport {loginTC} from \"./auth-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {Redirect} from \"react-router-dom\";\n\nexport const Login = () => {\n    const dispatch = useDispatch()\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'E-mail required!';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Password required!';\n            } else if (values.password.length < 2) {\n                errors.password = 'Password must be at least 2 characters long';\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values))\n            formik.resetForm();\n        }\n    })\n\n    if (isLoggedIn) {\n        return <Redirect to={'/'}/>\n    }\n\n    return <Grid container justify=\"center\">\n        <Grid item xs={4}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a href={'https://social-network.samuraijs.com/'}\n                               target={'_blank'}>here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField\n                            label=\"Email\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps('email')}\n                        />\n                        {formik.touched.email && formik.errors.email &&\n                        <div style={{color: 'red'}}>{formik.errors.email}</div>}\n                        <TextField\n                            type=\"password\"\n                            label=\"Password\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps('password')}\n                        />\n                        {formik.touched.password && formik.errors.password &&\n                        <div style={{color: 'red'}}>{formik.errors.password}</div>}\n                        <FormControlLabel\n                            label={'Remember me'}\n                            control={<Checkbox\n                                checked={formik.values.rememberMe}\n                                {...formik.getFieldProps('rememberMe')}\n                            />}\n                        />\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}\n//types\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n\n","import React, {useCallback, useEffect} from 'react';\nimport './App.css';\nimport {\n    AppBar,\n    Button,\n    CircularProgress,\n    Container,\n    IconButton,\n    LinearProgress,\n    Toolbar,\n    Typography\n} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./store\";\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\nimport {ErrorSnackbar} from \"../components/ ErrorSnackbar/ErrorSnackbar\";\nimport {Login} from \"../features/Login/Login\";\nimport {BrowserRouter, Redirect, Route, Switch} from 'react-router-dom';\nimport {logoutTC} from \"../features/Login/auth-reducer\";\n\ntype PropsType = {\n    demo?: boolean\n}\n\nfunction App({demo = false}: PropsType) {\n\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\n\n    useEffect(() => {\n        dispatch(initializeAppTC())\n    },[])\n\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\n\n    const logoutHandler = useCallback(() => {\n        dispatch(logoutTC())\n    },[])\n\n    if (!isInitialized) {\n        return <div\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n            <CircularProgress/>\n        </div>\n    }\n\n    return (\n        <BrowserRouter>\n            <div className=\"App\">\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                            <Menu/>\n                        </IconButton>\n                        <Typography variant=\"h6\">\n                        </Typography>\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\n                    </Toolbar>\n                </AppBar>\n                {status === \"loading\" && <LinearProgress color=\"secondary\" />}\n                <Container fixed>\n                    <Switch>\n                        <Route exact path={'/TodoList'} render={() => <Redirect to={'/'}/>}/>\n                        <Route exact path={'/'} render={ () => <TodolistsList demo={demo}/> }/>\n                        <Route path={'/login'} render={ () => <Login/> }/>\n                        <Route path={ '/404' } render={ () => <h1 style={{textAlign: 'center',fontSize: '50px'}}>404: PAGE NOT FOUND</h1> }/>\n                        <Redirect from={'*'} to={'/404'}/>\n                    </Switch>\n                </Container>\n                <ErrorSnackbar/>\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport App from \"./app/App\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}