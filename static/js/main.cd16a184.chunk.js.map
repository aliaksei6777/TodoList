{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","components/TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trimTitle","trim","className","value","onChange","e","currentTarget","onKeyPress","key","onClick","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","Todolist","tasks","map","t","isDone","changeTaskStatus","id","checked","type","newTitle","changeTaskTitle","removeTask","changeTodoListTitle","removeTodoList","addTask","filter","changeTodoListFilter","App","todoListID1","v1","todoListID2","todoLists","setTodoLists","setTasks","taskID","todoListID","filteredTasks","newTask","todoListTasks","task","find","newFilterValue","todolist","tl","todolisComponents","tasksForTodoList","newTodoListID","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.cd16a184.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\n\nexport function AddItemForm (props: AddItemFormPropsType) {\n    const [title, setTitle] = useState<string>(\"\")\n    const [error, setError] = useState<string|null>(null)\n\n    const addItem = () => {\n        const trimTitle = title.trim()\n        if (trimTitle) {\n            props.addItem(trimTitle)\n            setTitle(\"\")} else {\n            setError(\"Title is required!\")\n        }\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            addItem()\n        }\n    }\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n        setError(null)\n    }\n\n    return (\n        <div>\n            <input className={error ? \"error\" : \"\"}\n                   value={title}\n                   onChange={onChangeHandler}\n                   onKeyPress={onKeyPressHandler}/>\n            <button onClick={addItem}>+</button>\n            {error && <div className={\"error-message\"}>{error}</div>}\n        </div>\n    )\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\n\ntype EditableSpanPropsType = {\n    title: string\n    changeTitle: (newTitle: string) => void\n}\n\n\nexport function EditableSpan (props: EditableSpanPropsType) {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [title, setTitle] = useState<string>(props.title)\n\n    const onEditMode = () => setEditMode(true)\n    const offEditMode = () => {\n        setEditMode(false)\n        props.changeTitle(title)\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return (\n        editMode\n        ? <input value={title}\n                 autoFocus\n                 onChange={changeTitle}\n                 onKeyPress={e => {if(e.key === \"Enter\"){offEditMode()}}}\n                 onBlur={offEditMode}\n            />\n        : <span onDoubleClick={onEditMode}>{props.title}</span>\n    )\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {FilterValuesType, TaskType} from \"../App\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport {EditableSpan} from \"./EditableSpan\";\n\ntype TodoListPropsType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n    tasks: Array<TaskType>\n    removeTask: (taskID: string, todoListID: string) => void\n    changeTodoListFilter: (newFilterValue: FilterValuesType, todoListID: string) => void\n    addTask: (title: string, todoListID: string) => void\n    changeTaskStatus:(taskID: string, isDone: boolean, todoListID: string) => void\n    removeTodoList:(todoListID: string) => void\n    changeTaskTitle: (taskID: string, newTitle: string, todoListID: string) => void\n    changeTodoListTitle: (newTitle: string, todoListID: string) => void\n}\n\nfunction Todolist(props: TodoListPropsType) {\n\n    const tasks = props.tasks.map(t => {\n        const removeTask = () => props.removeTask(t.id, props.id)\n        const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)\n        const changeTaskTitle = (newTitle: string) => {\n            props.changeTaskTitle(t.id, newTitle, props.id)\n        }\n        return (\n            <li className={t.isDone ? \"is-done\" : \"\"}>\n                <input onChange={changeTaskStatus} type=\"checkbox\" checked={t.isDone} />\n                <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\n                <button onClick={removeTask}>x</button>\n            </li>)\n    })\n    const removeTodoList = () => props.removeTodoList(props.id)\n    const onAllClickHandler = () => {props.changeTodoListFilter('all', props.id)}\n    const onActiveClickHandler = () => {props.changeTodoListFilter('active', props.id)}\n    const onCompletedClickHandler = () => {props.changeTodoListFilter('completed', props.id)}\n    const addTask = (title: string) => props.addTask(title, props.id)\n    const changeTodolistTitle = (title: string) => {\n        props.changeTodoListTitle(title, props.id)\n    }\n\n    return (\n        <div className={'task'}>\n            <h3>\n                <EditableSpan title={props.title} changeTitle={changeTodolistTitle}/>\n                <button onClick={removeTodoList}>x</button></h3>\n            <AddItemForm addItem={addTask}/>\n            <ul>\n                {tasks}\n            </ul>\n            <div>\n                <button className={props.filter === \"all\" ? \"selected\" : \"\"}  onClick={onAllClickHandler}>All</button>\n                <button className={props.filter === \"active\" ? \"selected\" : \"\"} onClick={onActiveClickHandler}>Active</button>\n                <button className={props.filter === \"completed\" ? \"selected\" : \"\"} onClick={onCompletedClickHandler}>Completed</button>\n            </div>\n        </div>\n    );\n}\n\nexport default Todolist;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Todolist from \"./components/TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\ntype TaskStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nfunction App() {\r\n    // BLL:\r\n    const todoListID1 = v1()\r\n    const todoListID2 = v1()\r\n    const [todoLists, setTodoLists] = useState<TodoListType[]>([\r\n        {id: todoListID1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todoListID2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: true},\r\n            {id: v1(), title: \"GraphQL\", isDone: false}\r\n        ],\r\n        [todoListID2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"Bread\", isDone: true},\r\n            {id: v1(), title: \"Salt\", isDone: false},\r\n            {id: v1(), title: \"Sugar\", isDone: true},\r\n            {id: v1(), title: \"Fish\", isDone: false},\r\n        ]\r\n    })\r\n\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        const todoListTasks = tasks[todoListID]\r\n        const filteredTasks = todoListTasks.filter(t => t.id !== taskID) // true\r\n        tasks[todoListID] = filteredTasks\r\n        setTasks({...tasks})\r\n    }\r\n    function addTask(title: string, todoListID: string) {\r\n        const newTask: TaskType = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        }\r\n        const todoListTasks = tasks[todoListID]\r\n        tasks[todoListID] = [newTask, ...todoListTasks]\r\n        setTasks({...tasks})\r\n    }\r\n    function changeTaskStatus(taskID: string, isDone: boolean, todoListID: string) {\r\n        const todoListTasks = tasks[todoListID]\r\n        const task = todoListTasks.find(t => t.id === taskID)\r\n        if (task) {\r\n            task.isDone = isDone\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n    function changeTodoListFilter(newFilterValue: FilterValuesType, todoListID: string) {\r\n        const todolist = todoLists.find(tl => tl.id === todoListID)\r\n        if (todolist) {\r\n            todolist.filter = newFilterValue\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n    function removeTodoList (todoListID: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        delete tasks[todoListID]\r\n    }\r\n    function addTodoList (title: string) {\r\n        const newTodoListID = v1()\r\n        const todolist: TodoListType = {id: newTodoListID, title, filter: \"all\"}\r\n        setTodoLists([...todoLists, todolist])\r\n        setTasks({...tasks, [newTodoListID]:[]})\r\n    }\r\n    function changeTaskTitle(taskID: string, newTitle: string, todoListID: string) {\r\n        const todoListTasks = tasks[todoListID]\r\n        const task = todoListTasks.find(t => t.id === taskID)\r\n        if (task) {\r\n            task.title = newTitle\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n    function changeTodoListTitle(newTitle: string, todoListID: string) {\r\n        let todolist = todoLists.find(tl => tl.id === todoListID)\r\n        if (todolist) {\r\n            todolist.title = newTitle\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    const todolisComponents = todoLists.map(tl => {\r\n        let tasksForTodoList = tasks[tl.id]\r\n        if (tl.filter === \"active\") {\r\n            tasksForTodoList = tasksForTodoList.filter(t => t.isDone === false)\r\n        }\r\n        if (tl.filter === \"completed\") {\r\n            tasksForTodoList = tasksForTodoList.filter(t => t.isDone === true)\r\n        }\r\n        return <Todolist\r\n            id={tl.id}\r\n            title={tl.title}\r\n            tasks={tasksForTodoList}\r\n            filter={tl.filter}\r\n            removeTask={removeTask}\r\n            changeTodoListFilter={changeTodoListFilter}\r\n            addTask={addTask}\r\n            changeTaskStatus={changeTaskStatus}\r\n            removeTodoList={removeTodoList}\r\n            changeTaskTitle={changeTaskTitle}\r\n            changeTodoListTitle={changeTodoListTitle}\r\n        />\r\n    })\r\n    // UI:\r\n    // CRUD:\r\n    return (\r\n        <div className=\"App\">\r\n            <div>\r\n                <h3>Add todolist</h3>\r\n                <AddItemForm addItem={addTodoList}/>\r\n            </div>\r\n            {todolisComponents}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}