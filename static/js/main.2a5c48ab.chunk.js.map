{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","components/AddItemForm.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","components/EditableSpan.tsx","components/Task.tsx","components/TodoList.tsx","App.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trimTitle","trim","TextField","variant","label","helperText","value","onChange","e","currentTarget","onKeyPress","key","IconButton","color","onClick","ControlPoint","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","todolistId","delete","post","get","taskID","model","put","initialState","removeTaskAC","todoListId","taskId","type","addTaskAC","id","task","updateTask","setTasks","tasks","updateTaskTC","dispatch","getState","a","state","find","t","description","status","priority","startDate","deadline","Error","EditableSpan","console","log","editMode","setEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","Task","changeTaskTitle","changeTaskStatus","removeTask","onRemoveTaskClickHandler","useCallback","changeTaskStatusHandler","checked","Completed","New","newTitle","style","position","Checkbox","right","Delete","Todolist","useDispatch","useEffect","res","data","items","tasksForTodoList","filter","map","addTask","changeTodolistTitle","changeTodoListTitle","onAllClickHandler","changeTodoListFilter","onActiveClickHandler","onCompletedClickHandler","padding","removeTodoList","top","size","length","Button","App","todolists","useSelector","item","addTaskTC","removeTaskTC","addTodoList","todolist","addTodolistTC","newFilterValue","removeTodolistTC","todolistComponents","tl","Grid","Paper","className","AppBar","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","container","spacing","rootReducer","combineReducers","action","stateCopy","forEach","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2a5c48ab.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\n\nexport type TodoListType = {\n    id: string\n    addedDate: string\n    order: number\n    title: string\n}\n\n\ntype ResponseType<T = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: T\n}\nexport type UpdateTaskType = {\n    title: string\n    description: string\n    status: number\n    priority: number\n    startDate: string\n    deadline: string\n}\n\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n\n}\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\n\nexport type GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\n\n\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': '3968e2e7-ef1b-4e58-9108-d41e4dea47f4'\n    }\n})\n\nexport const todolistAPI = {\n    updateTodolist(todolistId: string, title: string) {\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title: title})\n    },\n    deleteTodolist(todolistId: string){\n       return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\n    },\n    createTodolist(title: string){\n        return instance.post<ResponseType<{item: TodoListType}>>('todo-lists', {title: title})\n    },\n    getTodolists(){\n        return instance.get<TodoListType[]>('todo-lists')\n    },\n    getTasks(todolistId: string){\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\n    },\n    createTask(todolistId: string, title: string){\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: title})\n    },\n    deleteTask(todolistId: string, taskID: string){\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskID}`)\n    },\n    updateTask(model: UpdateTaskType,todolistId: string, taskID: string){\n        return instance.put<ResponseType<{item: TaskType}>>(`/todo-lists/${todolistId}/tasks/${taskID}`,model)\n    }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {ControlPoint} from \"@material-ui/icons\";\n\nexport type AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\n\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\n    const [title, setTitle] = useState<string>(\"\")\n    const [error, setError] = useState<string | null>(null)\n\n    const addItem = () => {\n        const trimTitle = title.trim()\n        if (trimTitle) {\n            props.addItem(trimTitle)\n            setTitle(\"\")\n        } else {\n            setError(\"Title is required!\")\n        }\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null)\n        }\n        if (e.key === \"Enter\") {\n            addItem()\n        }\n    }\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return (\n        <div>\n            <TextField variant={'outlined'}\n                       label={'title'}\n                       error={!!error}\n                       helperText={error}\n                       value={title}\n                       onChange={onChangeHandler}\n                       onKeyPress={onKeyPressHandler}/>\n            <IconButton color={\"primary\"} onClick={addItem}>\n                <ControlPoint/>\n            </IconButton>\n        </div>\n    )\n})","import {todolistAPI, TodoListType} from \"../api/todolist-api\";\nimport {AppThunk} from \"./store\";\n\nexport type RemoveTodoListActionType = ReturnType<typeof removeTodoListAC>\nexport type addTodolistActionType = ReturnType<typeof addTodolist>\ntype ChangeTodoListTitleActionType = ReturnType<typeof changeTodoListTitleAC>\ntype ChangeTodoListFilterActionType = ReturnType<typeof changeTodoListFilterAC>\nexport type setTodolistActionType = ReturnType<typeof setTodolist>\n\nexport type TodolistsActionsType = RemoveTodoListActionType | addTodolistActionType\n    | ChangeTodoListTitleActionType | ChangeTodoListFilterActionType | setTodolistActionType\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\n\nexport type TodolistDomainType = TodoListType & {filter: FilterValuesType}\n\nconst initialState: Array<TodolistDomainType> = []\n\nexport const todoListsReducer = (state: Array<TodolistDomainType> = initialState, action: TodolistsActionsType):Array<TodolistDomainType> => {\n    switch (action.type) {\n        case \"REMOVE-TODOLIST\":{\n            return state.filter(tl => tl.id !== action.todoListId)\n        }\n        case \"ADD-TODOLIST\": {\n            return [{...action.todolist, filter: \"all\"},...state]\n        }\n        case \"CHANGE-TODOLIST-TITLE\": {\n            return state.map(tl => tl.id === action.todoListId ? {...tl,title: action.title} : {...tl})\n        }\n        case \"CHANGE-TODOLIST-FILTER\": {\n            return state.map(tl => tl.id === action.todoListId ? {...tl,filter: action.filter} : tl)\n        }\n        case \"SET-TODOLIST\": {\n            return action.todolists.map(tl => ({...tl, filter: \"all\"}))\n        }\n        default:\n            return state\n    }\n}\n\nexport const removeTodoListAC = (todoListId: string) => ({type: \"REMOVE-TODOLIST\", todoListId} as const)\n\nexport const addTodolist = (todolist: TodoListType) => ({type: \"ADD-TODOLIST\", todolist} as const)\n\nexport const changeTodoListTitleAC = (todoListId: string, title: string) =>\n    ({type: \"CHANGE-TODOLIST-TITLE\", todoListId, title} as const)\n\nexport const changeTodoListFilterAC = (todoListId: string, filter: FilterValuesType) =>\n    ({type: \"CHANGE-TODOLIST-FILTER\", todoListId, filter} as const)\n\nexport const setTodolist = (todolists: TodoListType[]) => ({type: 'SET-TODOLIST', todolists} as const)\n\nexport const fetchTodolistTC = ():AppThunk => async dispatch => {\n    try {\n        const res = await todolistAPI.getTodolists()\n        dispatch(setTodolist(res.data))\n    } catch (e) {\n        throw new Error(e)\n    }\n}\n\nexport const addTodolistTC = (title: string):AppThunk => async dispatch => {\n    try {\n        const res = await todolistAPI.createTodolist(title)\n        dispatch(addTodolist(res.data.data.item))\n    } catch (e) {\n        throw new Error(e)\n    }\n}\n\nexport const removeTodolistTC = (id: string):AppThunk => async dispatch => {\n    try {\n        const res = await todolistAPI.deleteTodolist(id)\n        dispatch(removeTodoListAC(id))\n    } catch (e) {\n        throw new Error(e)\n    }\n}","import {addTodolistActionType, RemoveTodoListActionType, setTodolistActionType} from \"./todolists-reducer\";\nimport {TaskType, todolistAPI} from \"../api/todolist-api\";\nimport {AppRootStateType, AppThunk} from \"./store\";\n\ntype RemoveTaskActionType = ReturnType<typeof removeTaskAC>\n\ntype addTaskActionType = ReturnType<typeof addTaskAC>\ntype updateTaskActionType = ReturnType<typeof updateTask>\ntype setTasksActionType = ReturnType<typeof setTasks>\nexport type TasksActionsType = RemoveTaskActionType | addTaskActionType | updateTaskActionType\n    | addTodolistActionType | RemoveTodoListActionType | setTodolistActionType | setTasksActionType\n\nexport type TaskStateType = {\n    [key: string]: TaskType[]\n}\n\nconst initialState: TaskStateType = {}\n\nexport const tasksReducer = (state: TaskStateType = initialState, action: TasksActionsType): TaskStateType => {\n    switch (action.type) {\n        case \"REMOVE-TASK\": {\n            return {...state,[action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)}\n        }\n        case \"ADD-TASK\": {\n            return {...state, [action.task.todoListId]: [...state[action.task.todoListId], {...action.task}]}\n        }\n        case \"UPDATE-TASK\": {\n            return {...state, [action.id]: state[action.id].map(t => t.id === action.taskID ? {...t, ...action.model} : t)}\n        }\n        case \"ADD-TODOLIST\": {\n            return {...state, [action.todolist.id]: []}\n\n        }\n        case \"REMOVE-TODOLIST\": {\n            const stateCopy = {...state}\n            delete stateCopy[action.todoListId]\n            return stateCopy\n        }\n        case \"SET-TODOLIST\": {\n            const stateCopy = {...state}\n            action.todolists.forEach(tl => {\n                stateCopy[tl.id] = []\n            })\n            return stateCopy\n        }\n        case \"SET-TASKS\": {\n            return {...state, [action.id]: action.tasks}\n        }\n        default:\n            return state\n    }\n}\n\nexport const removeTaskAC = (todoListId: string, taskId: string ) =>\n    ({type: \"REMOVE-TASK\", todoListId, taskId} as const)\n\nexport const addTaskAC = (id: string, task: TaskType) => ({type: 'ADD-TASK', task, id} as const)\n\nexport const updateTask = (id: string, taskID: string, model: UpdateTaskDomainModelType) => ({\n    type: \"UPDATE-TASK\", id, taskID, model} as const)\n\nexport const setTasks = (tasks: TaskType[], id: string) => ({type: 'SET-TASKS', tasks, id} as const)\n\nexport const fetchTasksTC = (id: string): AppThunk => async dispatch => {\n    const res = await todolistAPI.getTasks(id)\n    dispatch(setTasks(res.data.items,id))\n}\n\nexport const removeTaskTC = (id: string, taskId: string):AppThunk => async dispatch => {\n    try {\n        const res = await todolistAPI.deleteTask(id, taskId)\n        dispatch(removeTaskAC(id, taskId))\n    } catch (e) {\n        throw new Error(e)\n    }\n}\n\nexport const addTaskTC = (id: string, title: string):AppThunk => async dispatch => {\n    try {\n        const res = await todolistAPI.createTask(id, title)\n        dispatch(addTaskAC(id, res.data.data.item))\n    } catch (e) {\n        throw new Error(e)\n    }\n}\nexport type UpdateTaskDomainModelType = {\n    title?: string\n    description?: string\n    status?: number\n    priority?: number\n    startDate?: string\n    deadline?: string\n}\n\nexport const updateTaskTC = (id: string, taskId: string, model: UpdateTaskDomainModelType):AppThunk =>\n    async (dispatch,getState: () => AppRootStateType) => {\n    try {\n        const state = getState()\n        const task = state.tasks[id].find(t => t.id === taskId)\n        if(task) {\n            const res = todolistAPI.updateTask({\n                title: task.title,\n                description: task.description,\n                status: task.status,\n                priority: task.priority,\n                startDate: task.startDate,\n                deadline: task.deadline,\n                ...model\n            },id,taskId, )\n            dispatch(updateTask(id, taskId,model))\n        }\n    } catch (e) {\n        throw new Error(e)\n    }\n}\n","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\nexport type EditableSpanPropsType = {\n    title: string\n    changeTitle: (newTitle: string) => void\n}\n\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n    console.log(\"EditableSpan\")\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [title, setTitle] = useState<string>(props.title)\n\n    const onEditMode = () => setEditMode(true)\n    const offEditMode = () => {\n        setEditMode(false)\n        props.changeTitle(title)\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return (\n        editMode\n            ? <TextField value={title}\n                         autoFocus\n                         onChange={changeTitle}\n                         onKeyPress={e => {if (e.key === \"Enter\") {offEditMode()}}}\n                         onBlur={offEditMode}/>\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\n    )\n});","import React, {ChangeEvent, useCallback} from 'react'\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport {EditableSpan} from \"./EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {TaskStatuses, TaskType} from \"../api/todolist-api\";\n\n\nexport type TaskPropsType = {\n    task: TaskType\n    todoListId: string\n    changeTaskTitle: (id: string, taskID: string, newTitle: string) => void\n    changeTaskStatus:(id: string, taskID: string, status: TaskStatuses) => void\n    removeTask: (id: string, taskID: string) => void\n}\n\nexport const Task:React.FC<TaskPropsType> = React.memo(({task,todoListId,changeTaskTitle,\n                                                            changeTaskStatus,removeTask}) => {\n    console.log(\"Task\")\n    const onRemoveTaskClickHandler = useCallback(() => removeTask(todoListId,task.id),\n        [removeTask,task.id,todoListId])\n    const changeTaskStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) =>\n        changeTaskStatus(todoListId, task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New)\n        ,[changeTaskStatus,task.id,todoListId])\n    const changeTitle = useCallback((newTitle: string) => {\n        changeTaskTitle(todoListId, task.id, newTitle)},[changeTaskTitle,task.id,todoListId])\n    return (\n        <div key={task.id} style={{position: 'relative'}}>\n            <Checkbox onChange={changeTaskStatusHandler} checked={task.status === TaskStatuses.Completed} />\n            <EditableSpan title={task.title} changeTitle={changeTitle}/>\n            <IconButton onClick={onRemoveTaskClickHandler} style={{ position: 'absolute', right: '5px'} }>\n                <Delete/>\n            </IconButton>\n        </div>)\n})\n\n\n","import React, {useCallback, useEffect} from \"react\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport {EditableSpan} from \"./EditableSpan\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {Task} from \"./Task\";\nimport {TaskStatuses, TaskType} from \"../api/todolist-api\";\nimport {FilterValuesType} from \"../state/todolists-reducer\";\nimport {useDispatch} from \"react-redux\";\nimport {fetchTasksTC} from \"../state/tasks-reducer\";\n\ntype TodoListPropsType = {\n    id: string\n    title: string\n    tasks: Array<TaskType>\n    filter: FilterValuesType\n    changeTodoListFilter: (id: string, newFilterValue: FilterValuesType) => void\n    addTask: (id: string, title: string) => void\n    removeTodoList:(id: string) => void\n    changeTaskTitle: (id: string, taskID: string, newTitle: string) => void\n    changeTaskStatus:(id: string, taskID: string, status: TaskStatuses) => void\n    removeTask: (id: string, taskID: string) => void\n    changeTodoListTitle: (id: string, newTitle: string) => void\n}\n\nexport const Todolist = React.memo((props: TodoListPropsType) => {\n    // let todolist = useSelector<AppRootStateType,TodoListType>(state => state.todolists.filter(todo => todo.id === props.id)[0])\n    const dispatch = useDispatch()\n    // let ownTasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[props.id])\n    useEffect(() => {\n        dispatch(fetchTasksTC(props.id))\n    },[])\n    let tasksForTodoList = props.tasks\n    if (props.filter === \"active\") {\n        tasksForTodoList = tasksForTodoList.filter(t => t.status === TaskStatuses.New)\n    }\n    if (props.filter === \"completed\") {\n        tasksForTodoList = tasksForTodoList.filter(t => t.status === TaskStatuses.Completed)\n    }\n\n    const tasks = tasksForTodoList.map(t =>\n       <Task key={t.id} task={t} todoListId={props.id} changeTaskTitle={props.changeTaskTitle}\n             changeTaskStatus={props.changeTaskStatus} removeTask={props.removeTask}/>\n    )\n\n    const addTask = useCallback((title: string) => props.addTask(props.id,title),[props.addTask,props.id])\n    const removeTodoList = () => props.removeTodoList(props.id)\n    const changeTodolistTitle = useCallback((title: string) => {props.changeTodoListTitle(props.id,title)},\n        [props.changeTodoListTitle, props.id])\n\n    const onAllClickHandler = useCallback(() => {props.changeTodoListFilter(props.id,'all' )},\n        [props.changeTodoListFilter,props.id])\n\n    const onActiveClickHandler = useCallback(() => {props.changeTodoListFilter(props.id,'active' )},\n        [props.changeTodoListFilter,props.id])\n\n    const onCompletedClickHandler = useCallback(() => {\n        props.changeTodoListFilter(props.id,'completed' )},[props.changeTodoListFilter,props.id])\n\n    return (\n        <div style={{padding: '10px', position: 'relative'}}>\n            <h3>\n                <EditableSpan title={props.title} changeTitle={changeTodolistTitle}/>\n                <IconButton onClick={removeTodoList}\n                            style={{position: 'absolute', right: '2px', top: '2px'}}\n                            size={\"small\"}\n                >\n                    <Delete/>\n                </IconButton></h3>\n            <AddItemForm addItem={addTask}/>\n            <div>\n                {tasks}\n                {!tasksForTodoList.length && <div style={{padding: '10px', color: 'grey'}}>No task</div>}\n            </div>\n            <div>\n                <Button onClick={onAllClickHandler}\n                        size={\"small\"}\n                        variant={props.filter === \"all\" ? \"contained\" : \"text\"}\n                >All</Button>\n                <Button onClick={onActiveClickHandler}\n                        size={\"small\"}\n                        variant={props.filter === \"active\" ? \"contained\" : \"text\"}\n                        color={\"primary\"}\n                >Active</Button>\n                <Button onClick={onCompletedClickHandler}\n                        size={\"small\"}\n                        variant={props.filter === \"completed\" ? \"contained\" : \"text\"}\n                        color={\"secondary\"}\n                >Completed</Button>\n            </div>\n        </div>\n    );\n})\n","import React, {useCallback, useEffect} from 'react';\nimport './App.css';\nimport {AddItemForm} from \"./components/AddItemForm\";\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {\n    addTodolistTC,\n    changeTodoListFilterAC,\n    changeTodoListTitleAC, fetchTodolistTC,\n    FilterValuesType,\n    removeTodolistTC,\n    TodolistDomainType,\n} from \"./state/todolists-reducer\";\nimport {addTaskTC, removeTaskTC, TaskStateType, updateTaskTC} from \"./state/tasks-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./state/store\";\nimport {Todolist} from \"./components/TodoList\";\nimport {TaskStatuses } from \"./api/todolist-api\";\n\n\nfunction App() {\n\n    useEffect(() => {\n        dispatch(fetchTodolistTC())\n    },[])\n\n    const todolists = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todolists)\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\n    const dispatch = useDispatch()\n\n    const addTask = useCallback((id: string, title: string) => {\n        dispatch(addTaskTC(id, title))},[dispatch])\n\n    const removeTask = useCallback((id: string, taskID: string) => {\n        dispatch(removeTaskTC(id, taskID))},[dispatch])\n\n    const changeTaskStatus = useCallback((id: string, taskID: string, status: TaskStatuses) => {\n        dispatch(updateTaskTC(id, taskID, {status}))},[dispatch])\n\n    const changeTaskTitle = useCallback((id: string, taskID: string, newTitle: string) => {\n        dispatch(updateTaskTC(id, taskID, {title: newTitle}))},[dispatch])\n\n    const addTodoList = useCallback((title: string) => {\n        dispatch(addTodolistTC(title))\n    },[dispatch])\n    const changeTodoListFilter = useCallback((id: string, newFilterValue: FilterValuesType) => {\n        dispatch(changeTodoListFilterAC(id, newFilterValue))\n    },[dispatch])\n    const removeTodoList = useCallback((id: string) => {\n        dispatch(removeTodolistTC(id))\n    },[dispatch])\n    const changeTodoListTitle = useCallback((id: string, newTitle: string) => {\n        dispatch(changeTodoListTitleAC(id, newTitle))\n    },[dispatch])\n\n    const todolistComponents = todolists.map(tl => {\n        return <Grid item key={tl.id}>\n            <Paper style={{padding: \"10px\"}}>\n                <Todolist\n                    key={tl.id}\n                    id={tl.id}\n                    title={tl.title}\n                    tasks={tasks[tl.id]}\n                    filter={tl.filter}\n                    removeTask={removeTask}\n                    changeTodoListFilter={changeTodoListFilter}\n                    addTask={addTask}\n                    changeTaskStatus={changeTaskStatus}\n                    removeTodoList={removeTodoList}\n                    changeTaskTitle={changeTaskTitle}\n                    changeTodoListTitle={changeTodoListTitle}\n                />\n            </Paper>\n        </Grid>\n    })\n    // UI:\n    // CRUD:\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container style={{padding: \"20px\"}}>\n                    <div>\n                        <h3>add new todolist</h3>\n                        <div><AddItemForm addItem={addTodoList}/></div>\n                    </div>\n                </Grid>\n                <Grid container spacing={3}>\n                    {todolistComponents}\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {TasksActionsType, tasksReducer} from \"./tasks-reducer\";\nimport {TodolistsActionsType, todoListsReducer} from \"./todolists-reducer\";\nimport thunk, {ThunkAction} from \"redux-thunk\";\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todoListsReducer\n})\n\n// let preloadedState;\n// const persistedTodostring = localStorage.getItem('app-state')\n// if (persistedTodostring) {\n//     preloadedState = JSON.parse(persistedTodostring)\n// }\nexport type AppActionsType = TodolistsActionsType | TasksActionsType\nexport type AppThunk<ReturnType = void> = ThunkAction<void,AppRootStateType,unknown,AppActionsType>\nexport const store = createStore(rootReducer,applyMiddleware(thunk))\n\n// store.subscribe(() => {\n//     localStorage.setItem('app-state',JSON.stringify(store.getState()))\n// })\n\n// @ts-ignore\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}