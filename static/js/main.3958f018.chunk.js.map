{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","components/AddItemForm.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","components/EditableSpan.tsx","components/Task.tsx","components/TodoList.tsx","App.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trimTitle","trim","TextField","variant","label","helperText","value","onChange","e","currentTarget","onKeyPress","key","IconButton","color","onClick","ControlPoint","initialState","axios","create","baseURL","withCredentials","headers","EditableSpan","console","log","editMode","setEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","Task","task","todoListId","changeTaskTitle","changeTaskStatus","removeTask","onRemoveTaskClickHandler","useCallback","taskId","changeTaskStatusHandler","checked","Completed","New","newTitle","style","position","Checkbox","status","right","Delete","Todolist","tasksForTodoList","tasks","filter","t","map","addTask","changeTodolistTitle","changeTodoListTitle","onAllClickHandler","changeTodoListFilter","onActiveClickHandler","onCompletedClickHandler","padding","removeTodoList","top","size","length","Button","App","preloadedState","todolists","useSelector","state","dispatch","useDispatch","id","type","addTaskAC","taskID","changeTaskStatusAC","addTodoList","v1","addTodoListAC","newFilterValue","todolistComponents","tl","Grid","item","Paper","className","AppBar","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","container","spacing","rootReducer","combineReducers","action","addedDate","deadline","description","startDate","order","priority","Low","stateCopy","persistedTodostring","localStorage","getItem","JSON","parse","store","createStore","subscribe","setItem","stringify","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3958f018.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\n\nexport type TodoListType = {\n    todoListId: string\n    addedDate: string\n    order: number\n    title: string\n}\n\n\ntype ResponseType<T = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: T\n}\ntype UpdateTaskType = {\n    title: string\n    description: string | null\n    status: number\n    priority: number\n    startDate: string | null\n    deadline: string | null\n}\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n\n}\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    taskId: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\n\nexport type GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\n\n\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': '3968e2e7-ef1b-4e58-9108-d41e4dea47f4'\n    }\n})\n\nexport const todolistAPI = {\n    updateTodolist(todolistId: string, title: string) {\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title: title})\n    },\n    deleteTodolist(todolistId: string){\n       return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\n    },\n    createTodolist(title: string){\n        return instance.post<ResponseType<{item: TodoListType}>>('todo-lists', {title: title})\n    },\n    getTodolists(){\n        return instance.get<TodoListType[]>('todo-lists')\n    },\n    getTasks(todolistId: string){\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\n    },\n    createTask(todolistId: string, title: string){\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: title})\n    },\n    deleteTask(todolistId: string, taskID: string){\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskID}`)\n    },\n    updateTask(payload: UpdateTaskType,todolistId: string, taskID: string){\n        return instance.put<ResponseType<{item: TaskType}>>(`/todo-lists/${todolistId}/tasks/${taskID}`,payload)\n    }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {ControlPoint} from \"@material-ui/icons\";\n\nexport type AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\n\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\n    const [title, setTitle] = useState<string>(\"\")\n    const [error, setError] = useState<string | null>(null)\n\n    const addItem = () => {\n        const trimTitle = title.trim()\n        if (trimTitle) {\n            props.addItem(trimTitle)\n            setTitle(\"\")\n        } else {\n            setError(\"Title is required!\")\n        }\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null)\n        }\n        if (e.key === \"Enter\") {\n            addItem()\n        }\n    }\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return (\n        <div>\n            <TextField variant={'outlined'}\n                       label={'title'}\n                       error={!!error}\n                       helperText={error}\n                       value={title}\n                       onChange={onChangeHandler}\n                       onKeyPress={onKeyPressHandler}/>\n            <IconButton color={\"primary\"} onClick={addItem}>\n                <ControlPoint/>\n            </IconButton>\n        </div>\n    )\n})","import {v1} from \"uuid\";\nimport {TodoListType} from \"../api/todolist-api\";\n\nexport type RemoveTodoListActionType = {\n    type: \"REMOVE-TODOLIST\"\n    todoListId: string\n}\nexport type AddTodoListActionType = {\n    type: \"ADD-TODOLIST\",\n    todoListId: string,\n    title: string\n\n}\ntype ChangeTodoListTitleActionType = {\n    type: \"CHANGE-TODOLIST-TITLE\"\n    todoListId: string\n    title: string\n}\ntype ChangeTodoListFilterActionType = {\n    type: \"CHANGE-TODOLIST-FILTER\"\n    todoListId: string\n    filter: FilterValuesType\n}\n\nexport type ActionType = RemoveTodoListActionType | AddTodoListActionType\n    | ChangeTodoListTitleActionType | ChangeTodoListFilterActionType\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\n\nexport type TodolistDomainType = TodoListType & {filter: FilterValuesType}\n\nconst initialState: Array<TodolistDomainType> = []\n\nexport const todoListsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionType):Array<TodolistDomainType> => {\n    switch (action.type) {\n        case \"REMOVE-TODOLIST\":{\n            return state.filter(tl => tl.todoListId !== action.todoListId)\n        }\n        case \"ADD-TODOLIST\": {\n            return [...state, {todoListId: action.todoListId, title: action.title, filter: \"all\", addedDate: '', order: 0}]\n        }\n        case \"CHANGE-TODOLIST-TITLE\": {\n            return state.map(tl => tl.todoListId === action.todoListId ? {...tl,title: action.title} : {...tl})\n        }\n        case \"CHANGE-TODOLIST-FILTER\": {\n            return state.map(tl => tl.todoListId === action.todoListId ? {...tl,filter: action.filter} : tl)\n        }\n        default:\n            return state\n    }\n}\n\nexport const removeTodoListAC = (todoListId: string): RemoveTodoListActionType => {\n    return {\n        type: \"REMOVE-TODOLIST\",\n        todoListId\n    }\n}\nexport const addTodoListAC = (title: string): AddTodoListActionType => {\n    return {\n        type: \"ADD-TODOLIST\",\n        todoListId: v1(),\n        title\n    }\n}\nexport const changeTodoListTitleAC = (todoListId: string, title: string): ChangeTodoListTitleActionType => {\n    return {\n        type: \"CHANGE-TODOLIST-TITLE\",\n        todoListId,\n        title\n    }\n}\nexport const changeTodoListFilterAC = (todoListId: string, filter: FilterValuesType): ChangeTodoListFilterActionType => {\n    return {\n        type: \"CHANGE-TODOLIST-FILTER\",\n        todoListId,\n        filter\n    }\n}","import {v1} from \"uuid\";\nimport {AddTodoListActionType, RemoveTodoListActionType} from \"./todolists-reducer\";\nimport {TaskPriorities, TaskStatuses, TaskType} from \"../api/todolist-api\";\n\ntype RemoveTaskActionType = {\n    type: \"REMOVE-TASK\"\n    taskId: string\n    todoListId: string\n}\ntype AddTaskActionType = {\n    type: \"ADD-TASK\"\n    title: string\n    todoListId: string\n}\ntype ChangeTaskStatusActionType = {\n    type: \"CHANGE-TASK-STATUS\"\n    taskId: string,\n    status: TaskStatuses,\n    todoListId: string\n}\ntype ChangeTaskTitleActionType = {\n    type: \"CHANGE-TASK-TITLE\"\n    taskId: string,\n    title: string,\n    todoListId: string\n}\n\nexport type ActionType = RemoveTaskActionType | AddTaskActionType\n    | ChangeTaskStatusActionType | ChangeTaskTitleActionType\n    | AddTodoListActionType | RemoveTodoListActionType\n\nexport type TaskStateType = {\n    [key: string]: TaskType[]\n}\n\nconst initialState: TaskStateType = {}\n\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionType): TaskStateType => {\n    switch (action.type) {\n        case \"REMOVE-TASK\": {\n            return {...state,[action.todoListId]: state[action.todoListId].filter(t => t.taskId !== action.taskId)}\n        }\n        case \"ADD-TASK\": {\n            return {...state, [action.todoListId]:[...state[action.todoListId],\n                    {taskId: v1(), title: action.title, status: TaskStatuses.New,\n                        todoListId: action.todoListId, addedDate: \"\", deadline: \"\", description:\"\", startDate: \"\",\n                        order: 0, priority: TaskPriorities.Low\n                    }]}\n        }\n        case \"CHANGE-TASK-STATUS\": {\n            return {...state, [action.todoListId]: state[action.todoListId].map(t => t.taskId === action.taskId\n                    ? {...t,status: action.status} : t)}\n        }\n        case \"CHANGE-TASK-TITLE\": {\n            return {...state, [action.todoListId]: state[action.todoListId].map(t => t.taskId === action.taskId\n                    ? {...t,title: action.title} : t)}\n        }\n        case \"ADD-TODOLIST\": {\n            return {...state, [action.todoListId]: []}\n\n        }\n        case \"REMOVE-TODOLIST\": {\n            const stateCopy = {...state}\n            delete stateCopy[action.todoListId]\n            return stateCopy\n        }\n        default:\n            return state\n    }\n}\n\nexport const removeTaskAC = (todoListId: string, taskId: string ): RemoveTaskActionType => {\n    return {type: \"REMOVE-TASK\", todoListId, taskId} as const\n}\nexport const addTaskAC = (todoListId: string, title: string): AddTaskActionType => {\n    return {type: \"ADD-TASK\", todoListId, title} as const\n}\nexport const changeTaskStatusAC = (todoListId: string, taskId: string, status: TaskStatuses): ChangeTaskStatusActionType => {\n    return {type: \"CHANGE-TASK-STATUS\", todoListId, taskId, status} as const\n}\nexport const changeTaskTitleAC = (todoListId: string, taskId: string, title: string, ): ChangeTaskTitleActionType => {\n    return {type: \"CHANGE-TASK-TITLE\", todoListId, taskId, title} as const\n}\n","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\nexport type EditableSpanPropsType = {\n    title: string\n    changeTitle: (newTitle: string) => void\n}\n\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n    console.log(\"EditableSpan\")\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [title, setTitle] = useState<string>(props.title)\n\n    const onEditMode = () => setEditMode(true)\n    const offEditMode = () => {\n        setEditMode(false)\n        props.changeTitle(title)\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return (\n        editMode\n            ? <TextField value={title}\n                         autoFocus\n                         onChange={changeTitle}\n                         onKeyPress={e => {if (e.key === \"Enter\") {offEditMode()}}}\n                         onBlur={offEditMode}/>\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\n    )\n});","import React, {ChangeEvent, useCallback} from 'react'\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport {EditableSpan} from \"./EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {TaskStatuses, TaskType} from \"../api/todolist-api\";\n\n\nexport type TaskPropsType = {\n    task: TaskType\n    todoListId: string\n    changeTaskTitle: (id: string, taskID: string, newTitle: string) => void\n    changeTaskStatus:(id: string, taskID: string, status: TaskStatuses) => void\n    removeTask: (id: string, taskID: string) => void\n}\n\nexport const Task:React.FC<TaskPropsType> = React.memo(({task,todoListId,changeTaskTitle,\n                                                            changeTaskStatus,removeTask}) => {\n    console.log(\"Task\")\n    const onRemoveTaskClickHandler = useCallback(() => removeTask(todoListId,task.taskId),\n        [removeTask,task.taskId,todoListId])\n    const changeTaskStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) =>\n        changeTaskStatus(todoListId, task.taskId, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New)\n        ,[changeTaskStatus,task.taskId,todoListId])\n    const changeTitle = useCallback((newTitle: string) => {\n        changeTaskTitle(todoListId, task.taskId, newTitle)},[changeTaskTitle,task.taskId,todoListId])\n    return (\n        <div key={task.taskId} style={{position: 'relative'}}>\n            <Checkbox onChange={changeTaskStatusHandler} checked={task.status === TaskStatuses.Completed} />\n            <EditableSpan title={task.title} changeTitle={changeTitle}/>\n            <IconButton onClick={onRemoveTaskClickHandler} style={{ position: 'absolute', right: '5px'} }>\n                <Delete/>\n            </IconButton>\n        </div>)\n})\n\n\n","import React, {useCallback} from \"react\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport {EditableSpan} from \"./EditableSpan\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\n\nimport {Task} from \"./Task\";\nimport {TaskStatuses, TaskType} from \"../api/todolist-api\";\nimport {FilterValuesType} from \"../state/todolists-reducer\";\n\ntype TodoListPropsType = {\n    todoListId: string\n    title: string\n    tasks: Array<TaskType>\n    filter: FilterValuesType\n    changeTodoListFilter: (id: string, newFilterValue: FilterValuesType) => void\n    addTask: (id: string, title: string) => void\n    removeTodoList:(id: string) => void\n    changeTaskTitle: (id: string, taskID: string, newTitle: string) => void\n    changeTaskStatus:(id: string, taskID: string, status: TaskStatuses) => void\n    removeTask: (id: string, taskID: string) => void\n    changeTodoListTitle: (id: string, newTitle: string) => void\n}\n\nexport const Todolist = React.memo((props: TodoListPropsType) => {\n    // let todolist = useSelector<AppRootStateType,TodoListType>(state => state.todolists.filter(todo => todo.id === props.id)[0])\n    // const dispatch = useDispatch()\n    // let ownTasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[props.id])\n    let tasksForTodoList = props.tasks\n    if (props.filter === \"active\") {\n        tasksForTodoList = tasksForTodoList.filter(t => t.status === TaskStatuses.New)\n    }\n    if (props.filter === \"completed\") {\n        tasksForTodoList = tasksForTodoList.filter(t => t.status === TaskStatuses.Completed)\n    }\n\n    const tasks = tasksForTodoList.map(t =>\n       <Task key={t.taskId} task={t} todoListId={props.todoListId} changeTaskTitle={props.changeTaskTitle}\n             changeTaskStatus={props.changeTaskStatus} removeTask={props.removeTask}/>\n    )\n\n    const addTask = useCallback((title: string) => props.addTask(props.todoListId,title),[props.addTask,props.todoListId])\n    const removeTodoList = () => props.removeTodoList(props.todoListId)\n    const changeTodolistTitle = useCallback((title: string) => {\n        props.changeTodoListTitle(props.todoListId,title)\n    },[props.changeTodoListTitle, props.todoListId])\n    const onAllClickHandler = useCallback(() => {\n        props.changeTodoListFilter(props.todoListId,'all' )},[props.changeTodoListFilter,props.todoListId])\n    const onActiveClickHandler = useCallback(() => {\n        props.changeTodoListFilter(props.todoListId,'active' )},[props.changeTodoListFilter,props.todoListId])\n    const onCompletedClickHandler = useCallback(() => {\n        props.changeTodoListFilter(props.todoListId,'completed' )},[props.changeTodoListFilter,props.todoListId])\n\n    return (\n        <div style={{padding: '10px', position: 'relative'}}>\n            <h3>\n                <EditableSpan title={props.title} changeTitle={changeTodolistTitle}/>\n                <IconButton onClick={removeTodoList}\n                            style={{position: 'absolute', right: '2px', top: '2px'}}\n                            size={\"small\"}\n                >\n                    <Delete/>\n                </IconButton></h3>\n            <AddItemForm addItem={addTask}/>\n            <div>\n                {tasks}\n                {!tasksForTodoList.length && <div style={{padding: '10px', color: 'grey'}}>No task</div>}\n            </div>\n            <div>\n                <Button onClick={onAllClickHandler}\n                        size={\"small\"}\n                        variant={props.filter === \"all\" ? \"contained\" : \"text\"}\n                >All</Button>\n                <Button onClick={onActiveClickHandler}\n                        size={\"small\"}\n                        variant={props.filter === \"active\" ? \"contained\" : \"text\"}\n                        color={\"primary\"}\n                >Active</Button>\n                <Button onClick={onCompletedClickHandler}\n                        size={\"small\"}\n                        variant={props.filter === \"completed\" ? \"contained\" : \"text\"}\n                        color={\"secondary\"}\n                >Completed</Button>\n            </div>\n        </div>\n    );\n})\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodoListAC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleAC,\r\n    FilterValuesType,\r\n    removeTodoListAC,\r\n    TodolistDomainType,\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, TaskStateType} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {Todolist} from \"./components/TodoList\";\r\nimport {TaskStatuses, TaskType, TodoListType} from \"./api/todolist-api\";\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n    const todolists = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    const addTask = useCallback((id: string, title: string) => {\r\n        dispatch(addTaskAC(id, title))\r\n    },[dispatch])\r\n    const removeTask = useCallback((id: string, taskID: string) => {\r\n        dispatch(removeTaskAC(id, taskID))\r\n    },[dispatch])\r\n    const changeTaskStatus = useCallback((id: string, taskID: string, status: TaskStatuses) => {\r\n        dispatch(changeTaskStatusAC(id, taskID, status))\r\n    },[dispatch])\r\n    const changeTaskTitle = useCallback((id: string, taskID: string, newTitle: string) => {\r\n        dispatch(changeTaskTitleAC(id, taskID, newTitle))\r\n    },[dispatch])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodoListAC(title))\r\n    },[dispatch])\r\n    const changeTodoListFilter = useCallback((id: string, newFilterValue: FilterValuesType) => {\r\n        dispatch(changeTodoListFilterAC(id, newFilterValue))\r\n    },[dispatch])\r\n    const removeTodoList = useCallback((id: string) => {\r\n        dispatch(removeTodoListAC(id))\r\n    },[dispatch])\r\n    const changeTodoListTitle = useCallback((id: string, newTitle: string) => {\r\n        dispatch(changeTodoListTitleAC(id, newTitle))\r\n    },[dispatch])\r\n\r\n    const todolistComponents = todolists.map(tl => {\r\n        return <Grid item key={tl.todoListId}>\r\n            <Paper style={{padding: \"10px\"}}>\r\n                <Todolist\r\n                    key={tl.todoListId}\r\n                    todoListId={tl.todoListId}\r\n                    title={tl.title}\r\n                    tasks={tasks[tl.todoListId]}\r\n                    filter={tl.filter}\r\n                    removeTask={removeTask}\r\n                    changeTodoListFilter={changeTodoListFilter}\r\n                    addTask={addTask}\r\n                    changeTaskStatus={changeTaskStatus}\r\n                    removeTodoList={removeTodoList}\r\n                    changeTaskTitle={changeTaskTitle}\r\n                    changeTodoListTitle={changeTodoListTitle}\r\n                />\r\n            </Paper>\r\n        </Grid>\r\n    })\r\n    // UI:\r\n    // CRUD:\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <div>\r\n                        <h3>add new todolist</h3>\r\n                        <div><AddItemForm addItem={addTodoList}/></div>\r\n                    </div>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todolistComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {combineReducers, createStore} from \"redux\";\nimport {tasksReducer} from \"./tasks-reducer\";\nimport {todoListsReducer} from \"./todolists-reducer\";\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todoListsReducer\n})\n\nlet preloadedState;\nconst persistedTodostring = localStorage.getItem('app-state')\nif (persistedTodostring) {\n    preloadedState = JSON.parse(persistedTodostring)\n}\n\nexport const store = createStore(rootReducer,preloadedState)\n\nstore.subscribe(() => {\n    localStorage.setItem('app-state',JSON.stringify(store.getState()))\n})\n\n// @ts-ignore\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}